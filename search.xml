<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mybatis2</title>
      <link href="/2020/02/12/Mybatis2/"/>
      <url>/2020/02/12/Mybatis2/</url>
      
        <content type="html"><![CDATA[<h1 id="一-Mybatis简介"><a href="#一-Mybatis简介" class="headerlink" title="一.Mybatis简介"></a>一.Mybatis简介</h1><p>1.mybatis是一个半自动化的持久性框架，将SQL语句和java编码分离，SQL语句的编写，优化由开发人员负责。</p><p><img src="/2020/02/12/Mybatis2/1581423288477.png" alt="1581423288477"></p><p>下载链接： <a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3/releases</a> </p><h1 id="二-IDEA创建mybatis项目"><a href="#二-IDEA创建mybatis项目" class="headerlink" title="二.IDEA创建mybatis项目"></a>二.IDEA创建mybatis项目</h1><h2 id="1-项目创建-接口式编程"><a href="#1-项目创建-接口式编程" class="headerlink" title="1.项目创建 接口式编程"></a>1.项目创建 接口式编程</h2><p>推荐使用接口试编程</p><p><strong>目录结构：</strong></p><img src="/2020/02/12/Mybatis2/1581487706718.png" alt="1581487706718" style="zoom:80%;"><p>新建项目-maven-选择maven库（有maven库的前提下）</p><p><img src="/2020/02/12/Mybatis2/1581431644608.png" alt="1581431644608"></p><h2 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h2><h3 id="1-在pom-xml文件中添加依赖，build"><a href="#1-在pom-xml文件中添加依赖，build" class="headerlink" title="1.在pom.xml文件中添加依赖，build"></a><strong>1.在pom.xml文件中添加依赖，build</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">       &lt;!--打印日志文件--&gt;</span><br><span class="line">     &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.2.16&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">       &lt;!--mysql数据驱动--&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;8.0.13&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">       &lt;!--mybatis核心jar--&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;3.4.1&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">       &lt;build&gt;</span><br><span class="line">   &lt;resources&gt;</span><br><span class="line">     &lt;resource&gt;</span><br><span class="line">       &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">       &lt;includes&gt;</span><br><span class="line">         &lt;include&gt;**<span class="comment">/*.xml&lt;/include&gt;</span></span><br><span class="line"><span class="comment">       &lt;/includes&gt;</span></span><br><span class="line"><span class="comment">     &lt;/resource&gt;</span></span><br><span class="line"><span class="comment">     &lt;resource&gt;</span></span><br><span class="line"><span class="comment">       &lt;directory&gt;src/main/resources&lt;/directory&gt;</span></span><br><span class="line"><span class="comment">       &lt;includes&gt;</span></span><br><span class="line">         &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">         &lt;include&gt;**<span class="comment">/*.properties&lt;/include&gt;</span></span><br><span class="line"><span class="comment">       &lt;/includes&gt;</span></span><br><span class="line"><span class="comment">     &lt;/resource&gt;</span></span><br><span class="line"><span class="comment">   &lt;/resources&gt;</span></span><br><span class="line"><span class="comment"> &lt;/build&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-log4j日志添加"><a href="#2-log4j日志添加" class="headerlink" title="2.log4j日志添加"></a><strong>2.log4j日志添加</strong></h3><p>在src/main/resources 资源包下添加<strong>log4j.properties</strong>文件，resource文件与java蓝色文件同级 。</p><p>如果java文件不是蓝色，将其标记为源码文件即可</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Global logging configuration log4j.rootLogger=DEBUG, stdout #Consoleoutput... log4j.appender.stdout=org.apache.log4j.ConsoleAppender log4j.appender.stdout.layout=org.apache.log4j.PatternLayout log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure><p><img src="/2020/02/12/Mybatis2/1581432068970.png" alt="1581432068970"></p><h3 id="3-resource目录下配置文件添加"><a href="#3-resource目录下配置文件添加" class="headerlink" title="3.resource目录下配置文件添加"></a><strong>3.resource目录下配置文件添加</strong></h3><p><strong>mybatis.xml</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--加载驱动--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--数连接据库--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="symbol">&amp;amp;</span>useSSL=false"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456789"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将我们写好的sql映射文件一定要注册到全局配置文件中，可以复制相对路径填进去--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/ecjtu/mapper/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-编写User实体类"><a href="#4-编写User实体类" class="headerlink" title="4.编写User实体类"></a>4.编写User实体类</h3><p>根据数据库中信息编写，有什么列就写几个属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;        <span class="keyword">return</span> id;    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;        <span class="keyword">this</span>.id = id;    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;        <span class="keyword">return</span> name;    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;        <span class="keyword">this</span>.name = name;    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;        <span class="keyword">return</span> gender;    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;        <span class="keyword">this</span>.gender = gender;    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;       <span class="keyword">return</span> email;    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;        <span class="keyword">this</span>.email = email;    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> + <span class="string">"id="</span> + id + <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">        <span class="string">", gender='"</span> + gender + <span class="string">'\''</span> + <span class="string">", email='"</span> + email + <span class="string">'\''</span> + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-SQL映射文件UserMapper-xml"><a href="#5-SQL映射文件UserMapper-xml" class="headerlink" title="5.SQL映射文件UserMapper.xml"></a>5.SQL映射文件UserMapper.xml</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.ecjtu.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">namespace：名称空间，指定为接口的全类名</span></span><br><span class="line"><span class="comment">id:唯一标识符，与接口中的方法名要一致</span></span><br><span class="line"><span class="comment">resultType:返回值类型,可复制User的相对路径</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserById"</span> <span class="attr">resultType</span>=<span class="string">"com.ecjtu.User.User"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        select * from user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-编写接口UserMapper"><a href="#6-编写接口UserMapper" class="headerlink" title="6.编写接口UserMapper"></a>6.编写接口UserMapper</h3><p>编写映射文件中的接口，要与id名字一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">queryUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-测试"><a href="#7-测试" class="headerlink" title="7.测试"></a>7.测试</h3><p>具体操作在代码块中注释，Resources.getResourceAsStream要选择apache的，不能选择javax的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取配置资源文件</span></span><br><span class="line">        InputStream inputStream= Resources.getResourceAsStream(<span class="string">"mybatis.xml"</span>);</span><br><span class="line">        <span class="comment">//2.获取SqlSessionFactory对象，并将资源文件注入</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//3.获取sqlSession对象，能直接执行已经映射的sql语句</span></span><br><span class="line">        SqlSession sqlSession = factory.openSession();</span><br><span class="line">        <span class="comment">//4.根据SqlSession，获取接口的实现类对象</span></span><br><span class="line">        <span class="comment">//会为接口自动创建一个代理对象，代理对象去执行增删改查方法</span></span><br><span class="line">        <span class="comment">//UserMapper.class是接口类</span></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        User user = mapper.queryUserById(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//        System.out.println(mapper);//org.apache.ibatis.binding.MapperProxy@71623278</span></span><br><span class="line">        System.out.println(user);</span><br><span class="line">        sqlSession.close();<span class="comment">//用完记得关闭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-小结"><a href="#8-小结" class="headerlink" title="8.小结"></a>8.小结</h3><p>​    1.接口式编程</p><p>​    mybatis:    xxMapper==&gt;  xxMapper.xml      xxMapper接口有一个与之对应的xxMapper.xml  配置文件，该    配置文件相当于对xxMapper接口的实现。</p><ol start="2"><li><p>SqlSession代表和数据库的一次会话，用完关闭</p></li><li><p>SqlSession和connection一样是非线程安全，不能定义为  private SqlSession sqlsession 成员变量。每次使用都应该去获取新的对象</p></li><li><p>Mapper接口没有实现类，但是mybatis会为这个接口生成一个代理对象，将Mappper接口和Mapper.xml进行绑定    UserMapper mapper = sqlSession.getMapper(UserMapper.class)；</p></li><li><p>两个重要的配置文件：①mybatis.xml全局配置文件：包含数据库连接池，事务管理器等系统运行环境。</p><p>​                                      ②sql的mapper.xml映射文件：保存了每一个SQL语句的映射信息。</p></li></ol><h1 id="三-mybatis-xml全局配置文件"><a href="#三-mybatis-xml全局配置文件" class="headerlink" title="三.mybatis.xml全局配置文件"></a>三.mybatis.xml全局配置文件</h1><h2 id="1-properties（了解）"><a href="#1-properties（了解）" class="headerlink" title="1.properties（了解）"></a>1.properties（了解）</h2><p>1.mybatis可以使用<strong>properties标签</strong>来引入外部properties配置文件的内容,properties标签中包括resource和url两个属性。</p><p>​    <strong>resource</strong>:引入类路径下的资源；</p><p>​    <strong>url</strong>：引入网络或磁盘路径下的资源；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"dbconfig.properties"</span> &gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.刚开始我们是将jdbc的 driver，url ,  username，password 都写在mybatis.xml配置文件中<property>的value后，现在可以将其写在外部文件<strong>dbconfig.properties</strong>(放在resources资源文件下)中，在这里遇到一个错误：<a href="https://www.cnblogs.com/yongdongma/p/9911393.html" target="_blank" rel="noopener">https://www.cnblogs.com/yongdongma/p/9911393.html</a> （已解决）</property></p><p><strong>dbconfig.properties：</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">jdbc.driver=com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="xml">jdbc.url=jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone = GMT</span></span><br><span class="line"><span class="xml">jdbc.username=root</span></span><br><span class="line"><span class="xml">jdbc.password=123456789</span></span><br></pre></td></tr></table></figure><p>3.在将<property>标签中的value改为value=”${jdbc.xxx}”，改完之后运行看是否报错。</property></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引用外部资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"dbconfig.properties"</span> &gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"jdbc"</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置数据库连接信息 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"pooled"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--在引入外部资源文件（dbconfig.properties）后，value后的值要与外部文件中的值的名字相对应--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将我们写好的sql映射文件一定要注册到全局配置文件中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/ecjtu/mapper/UserMapper.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-settings设置"><a href="#2-settings设置" class="headerlink" title="2.settings设置"></a>2.settings设置</h2><p>1.这是MyBatis中极为重要的调整设置，它会改变MyBatis的运行行为。</p><p>2.settings包含很多重要的设置项，这里只取驼峰命名法设置项 <strong>mapUnderscoreToCamelCase</strong>，其默认值是        false，这里设置为true，开启驼峰命名法。</p><p>数据库不区分大小写，单词间要加下划线，而java中区分大小写，命名规范是驼峰命名法。  </p><p>  <strong>setting</strong>：用来设置每一个设置项</p><p>  <strong>name</strong>：设置项名  value:设置项取值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--settings标签放在configuration标签中，其中可以设置多个设置项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"xxxxx"</span> <span class="attr">value</span>=<span class="string">"xxxx"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-typeAliases别名处理器"><a href="#3-typeAliases别名处理器" class="headerlink" title="3.typeAliases别名处理器"></a><strong>3.typeAliases别名</strong>处理器</h2><p><strong>typeAliases</strong>别名处理器：可以为java类型起别名, 减少类完全限定名的冗余(也就是简化返回值类型的拼写) 。其中typeAlias标签中包括type和alias两个属性：<br>       <strong>type</strong>:指定要起别名的类全类名（可复制相对路径，但记得把 <strong>/</strong> 改成 <strong>.</strong> ），默认别名是类名小写（user）；</p><p>​       <strong>alias</strong>:指定别名；</p><p><strong>注意：别名不区分大小写</strong>，所以user，User都可以。</p><h3 id="1-单个起别名"><a href="#1-单个起别名" class="headerlink" title="1.单个起别名"></a>1.单个起别名</h3><p>单个起别名由于idea不写alias会报红，但也能编译通过，所以还是写alias指定命名为us</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在mybatis.xml全局配置文件中起了别名，就要在xxxMapper,xml  sql映射文件中修改resultType返回值类型，修改为别名 user</span></span><br><span class="line"><span class="comment">1.单个起别名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.ecjtu.User.User"</span> <span class="attr">alias</span>=<span class="string">"us"</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--在xxxMapper.xml中修改--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserById"</span> <span class="attr">resultType</span>=<span class="string">"us"</span>&gt;</span></span><br><span class="line">        select * from user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-批量起别名"><a href="#2-批量起别名" class="headerlink" title="2.批量起别名"></a>2.批量起别名</h3><p> package：为某个包下的所有类批量起别名<br> name:指定包名（当前包以及下面所有的后代包的每一个类都起一个默认别名（类名小写））</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.ecjtu.User"</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在mybatis.xml配置文件中用批量起别名都是默认别名，xxxMapper.xmlsql映射文件中的 <strong>resultType</strong>=“类名小写” 。</p><h3 id="3-别名注解"><a href="#3-别名注解" class="headerlink" title="3.别名注解"></a>3.别名注解</h3><p><strong>前提：批量起别名的情况下</strong>，如果类名重复，可以使用@Alias注解为某个类指定新的别名</p><p> 在没有注解的情况下，会使用 类的首字母小写的非限定类名来作为它的别名。 比如 <code>User.java</code> 的别名为 <code>user</code>；若有注解，则别名为其注解值author</p><p>当然别名也可以@Alias（“xxx随便”）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Alias</span>(<span class="string">"author"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这是一些为常见的 Java 类型内建的相应的类型别名。它们都是不区分大小写的，注意对基本类型名称重复采取的特殊命名风格。 我们起的别名不能跟下表中的别名重复</p><p><img src="/2020/02/12/Mybatis2/1581519510957.png" alt="1581519510957"></p><h2 id="4-typeHandlers-类型处理器（后补）"><a href="#4-typeHandlers-类型处理器（后补）" class="headerlink" title="4.typeHandlers 类型处理器（后补）"></a>4.typeHandlers 类型处理器（后补）</h2><h2 id="5-plugin插件（后补）"><a href="#5-plugin插件（后补）" class="headerlink" title="5.plugin插件（后补）"></a>5.plugin插件（后补）</h2><p>MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</p><ul><li>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</li><li>ParameterHandler (getParameterObject, setParameters)</li><li>ResultSetHandler (handleResultSets, handleOutputParameters)</li><li>StatementHandler (prepare, parameterize, batch, update, query)</li></ul><p>这些类中方法的细节可以通过查看每个方法的签名来发现，或者直接查看 MyBatis 发行包中的源代码。 如果你想做的不仅仅是监控方法的调用，那么你最好相当了解要重写的方法的行为。 因为如果在试图修改或重写已有方法的行为的时候，你很可能在破坏 MyBatis 的核心模块。 这些都是更低层的类和方法，所以使用插件的时候要特别当心。</p><h2 id="6-environments环境配置（了解）"><a href="#6-environments环境配置（了解）" class="headerlink" title="6.environments环境配置（了解）"></a>6.environments环境配置（了解）</h2><p>Mybatis可以配置多种环境，environment配置一个具体的环境信息，必须有两个标签<transactionManager>和<dataSource></dataSource></transactionManager></p><p><strong>1.transactionManager</strong>：事务管理器；</p><p>​        <strong>type</strong>:事务管理器类型，包括 JDBC  |  MANAGED.也可以自定义事务管理器,实现TransactionFactory接口，type指定为全类名，了解即可。</p><p>​        <strong>提示</strong>：如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器， 因为 Spring 模块会使用自带的管理器来覆盖前面（mybatis）的配置。 </p><p><strong>2.dateSource</strong>数据源：</p><p>​        <strong>type</strong>:数据源类型 ；有三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”）： </p><p><strong>default</strong>：指定某种环境，可以快速切换环境</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"xxx(填id的值)"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id代表当前环境的唯一标识--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"xxx"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"jdbc"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span> </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后会使用spring-mybatis整合,所以这里了解即可</p><h2 id="7-databaseIdProvider数据库厂商标识"><a href="#7-databaseIdProvider数据库厂商标识" class="headerlink" title="7.databaseIdProvider数据库厂商标识"></a>7.databaseIdProvider数据库厂商标识</h2><p>databaesIdProvider:支持多数据库厂商。<br>type=”DB_VENDOR”：VendorDatabaseIdProvider， 作用是得到数据库厂商的标识，mybatis就能根据数据库厂商标识来执行不同的sql 。</p><p>数据库厂商：MySQL,Oracle,SQL Server ….</p><h3 id="1-为不同厂商的数据库起别名"><a href="#1-为不同厂商的数据库起别名" class="headerlink" title="1.为不同厂商的数据库起别名"></a>1.为不同厂商的数据库起别名</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">"DB_VENDOR"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--为不同数据厂商起别名  MySql取别名为mysql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"MySql"</span> <span class="attr">value</span>=<span class="string">"mysql"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"Oracle"</span> <span class="attr">value</span>=<span class="string">"oracle"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"SQL Server"</span> <span class="attr">value</span>=<span class="string">"sqlserver"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为数据库起完别名后，要在sql映射文件（xxMapper.xml）中配置相应的数据库</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--databaseId=“mysql”  表示此条SQL语句只在mysql环境下才使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserById"</span> <span class="attr">resultType</span>=<span class="string">"121"</span>  <span class="attr">databaseId</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">     select * from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-切换环境测试"><a href="#2-切换环境测试" class="headerlink" title="2.切换环境测试"></a>2.切换环境测试</h3><p>1.mybatis中对SQLServer数据库进行操作，修改相应的信息后，记得导入SQLServer数据库专用的jar包，</p><p><img src="/2020/02/12/Mybatis2/1581598646572.png" alt="1581598646572"></p><p><strong>注意：databaseIdProvider</strong>这个标签一定要放在<strong>environments</strong>标签后，下面是各标签顺序，某个标签可以没有，但顺序不能变。</p><p><img src="/2020/02/12/Mybatis2/1581686231443.png" alt="1581686231443"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"SQLServer（对应id）"</span>&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"SQLServer（这个id随便取）"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"jdbc"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"pooled"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.microsoft.sqlserver.jdbc.SQLServerDriver"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:sqlserver://127.0.0.1:1433;databaseName=java课设"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"javakeshe"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"jdbc"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"pooled"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--4.databaesIdProvider:支持多数据库厂商</span></span><br><span class="line"><span class="comment">      type="DB_VENDOR"：VendorDatabaseIdProvider， 作用是得到数据库厂商的标识，mybatis就能根据数据库厂商标识来执行不同的sql</span></span><br><span class="line"><span class="comment">      MySQL,Oracle,SQL Server ....</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">"DB_VENDOR"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"SQL Server"</span> <span class="attr">value</span>=<span class="string">"sqlserver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"MySQL"</span> <span class="attr">value</span>=<span class="string">"mysql"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"Oracle"</span> <span class="attr">value</span>=<span class="string">"oracle"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.UserMapper.xml中要对sqlserver数据库所查询的user修改为  [user]，加上中括号。这里的<strong>dataBaseId</strong>就是你对不同厂商数据库软件起的别名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserById"</span> <span class="attr">resultType</span>=<span class="string">"com.ecjtu.User.User"</span> <span class="attr">databaseId</span>=<span class="string">"mysql"</span> &gt;</span></span><br><span class="line">    select * from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserById"</span> <span class="attr">resultType</span>=<span class="string">"com.ecjtu.User.User"</span> <span class="attr">databaseId</span>=<span class="string">"sqlserver"</span> &gt;</span></span><br><span class="line">    select * from [user] where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>若运行出现  错误：通过端口 1433 连接到主机 localhost 的 TCP/IP 连接失败。错误:“Connection refused: connect。解决：修改端口号和重启SQLServer服务即可 <a href="https://blog.csdn.net/u013282737/article/details/81013753" target="_blank" rel="noopener">https://blog.csdn.net/u013282737/article/details/81013753</a> </p><h2 id="8-mappers映射器"><a href="#8-mappers映射器" class="headerlink" title="8.mappers映射器"></a>8.mappers映射器</h2><p>将sql映射文件注册到全局配置（mybatis.xml）中，</p><p><strong>mapper</strong>:注册一个sql映射，<mapper>标签中有url,resource,class三个属性。<br>            注册配置文件：<br>                <strong>resource</strong>:使用相对于类路径的资源引用,应用类路径下的sql映射文件<br>                <strong>url</strong>:使用完全限定资源定位符,应用网络或磁盘路径下的sql映射文件<br>            注册接口：<br>                <strong>class</strong>:应用接口<br>                      1.有sql映射文件，映射文件名必须与接口同名，并且放在同一个目录（包）下；</mapper></p><p><img src="/2020/02/12/Mybatis2/1581685825405.png" alt="1581685825405"></p><p>​                      2.没有SQL映射文件，所有的Dao接口都是利用注解写在接口上。这里注意，如果接了注解，sql映射文件中（xxxmapper.xml）就不能有该条sql语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">queryUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"><span class="comment">//    User queryUserById2(int id);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​                      推荐：<br>​                            比较复杂的Dao接口，写sql映射文件（mapper.xml）；<br>​                            不重要的，简单的Dao接口为了开发快速可以使用注解</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mapper url="file:///var/mappers/AuthorMapper.xml"/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mapper class="com.ecjtu.mapper.UserMapper"/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mapper resource="com/ecjtu/mapper/UserMapper.xml" /&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.ecjtu.mapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="四-映射文件"><a href="#四-映射文件" class="headerlink" title="四.映射文件"></a>四.映射文件</h1><p>映射文件指导着Mybatis如何进行数据库增删改查，有着非常重要的意义</p><h2 id="1-测试增删改查"><a href="#1-测试增删改查" class="headerlink" title="1.测试增删改查"></a>1.测试增删改查</h2><p>首先是写增删改查接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">queryUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sql映射文件编写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--values 中的值与User对象中的属性值相同--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        insert into user(name,gender,email) values(#&#123;name&#125;,#&#123;gender&#125;,#&#123;email&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--name=#&#123;name&#125;  前面的name是表列名，#&#123;name&#125;中的name是对象属性name--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        update user</span><br><span class="line">         set</span><br><span class="line">          name=#&#123;name&#125;,gender=#&#123;gender&#125;,email=#&#123;email&#125;</span><br><span class="line">        where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUserById"</span> &gt;</span></span><br><span class="line">        delete from user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserById"</span>  <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.ecjtu.user.User"</span> &gt;</span></span><br><span class="line">        select * from user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后测试，编写增删改查代码</p><p><strong>注意</strong>：User类中要有无参构造器和有参构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream inputStream=Resources.getResourceAsStream(<span class="string">"mybatis.xml"</span>);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        <span class="comment">//1.这里的openSession选择不是auto自动提交,</span></span><br><span class="line">        SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//id填null会报错，因为在User有参构造中有id属性，且id在数据库已中设置为自增，所以这里可以随便填。</span></span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"insert"</span>,<span class="string">"1"</span>,<span class="string">"www.insert.com"</span>);</span><br><span class="line">       </span><br><span class="line"><span class="comment">//  增  mapper.insertUser(user1);</span></span><br><span class="line"><span class="comment">//  改  mapper.updateUser(user1);</span></span><br><span class="line"><span class="comment">//  删  mapper.deleteUserById(2);</span></span><br><span class="line"><span class="comment">//        2.手动提交数据</span></span><br><span class="line">        session.commit();</span><br><span class="line"><span class="comment">//        User user = mapper.queryUserById(1);</span></span><br><span class="line"><span class="comment">//        System.out.println(user1);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>另外，mybatis也允许增删改直接定义为 int , Long ,Boolean返回类型；</p><p>手动提交也可以变为自动提交;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SqlSession session = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>例如：定义为boolean返回类型。先在接口中将抽象方法定义为boolean，才可以在测试方法中定义boolean返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> b = mapper.updateUser(user1);</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure><h2 id="2-insert获取自增主键的值（粗略）"><a href="#2-insert获取自增主键的值（粗略）" class="headerlink" title="2.insert获取自增主键的值（粗略）"></a>2.insert获取自增主键的值（粗略）</h2><p>mysql支持自增主键，自增主键值的获取<br>        mybatis可以利用statement.getGeneratedKeys();<br>        useGeneratedKeys=”true”,使用自增主键获取主键值;<br>        KeyProperty:指定对应的主键书属性，也是mybatis获取主键值以后，将这个值封装给javaBean的哪个属性;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id(javaBean中的属性)"</span>&gt;</span></span><br><span class="line">        insert into user(name,gender,email) values(#&#123;name&#125;,#&#123;gender&#125;,#&#123;email&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-参数处理"><a href="#3-参数处理" class="headerlink" title="3.参数处理"></a>3.参数处理</h2><h3 id="1-单个参数："><a href="#1-单个参数：" class="headerlink" title="1.单个参数："></a><strong>1.单个参数</strong>：</h3><p>mybatis不会特殊处理，#{参数名}，取出参数值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserById"</span>  <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.ecjtu.user.User"</span> &gt;</span></span><br><span class="line">        select * from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-多个参数："><a href="#2-多个参数：" class="headerlink" title="2.多个参数："></a><strong>2.多个参数</strong>：</h3><p>mybatis会做特殊处理。多个参数会被封装成一个map，其中为键值对，我们写传入的参数，写的是键。</p><p>​                    Key：param1。。。paramN</p><p>​                    value：传入的参数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="function">User <span class="title">queryUserByIdAndName</span><span class="params">(<span class="keyword">int</span> id, String name)</span></span>;</span><br></pre></td></tr></table></figure><p>SQL语句编写，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserByIdAndName"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span> <span class="attr">resultType</span>=<span class="string">"com.ecjtu.user.User"</span>&gt;</span></span><br><span class="line">第一个传入的参数的序号为0,第二个为1，以此类推到N-1</span><br><span class="line">        select * from user where id=#&#123;0&#125; and name=#&#123;1&#125;</span><br><span class="line">    或者写成param1。。。paramN，第一个传入的参数为param1，第二个传入的参数为param2，。。。paramN</span><br><span class="line">    select * from user where id=#&#123;param1&#125; and name=#&#123;param2&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多参数查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User user = mapper.queryUserByIdAndName(<span class="number">2</span>,<span class="string">"mysql"</span>);</span><br></pre></td></tr></table></figure><h3 id="3-命名参数"><a href="#3-命名参数" class="headerlink" title="3.命名参数"></a><strong>3.命名参数</strong></h3><p>由于用paramN这种写参数不见名知意，所以可以明确指定封装参数时map的Key</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">User <span class="title">queryUserByIdAndName</span><span class="params">(@Param(<span class="string">"666"</span>)</span> <span class="keyword">int</span> id,@<span class="title">Param</span><span class="params">(<span class="string">"name"</span>)</span> String name)</span>;</span><br></pre></td></tr></table></figure><p>这样处理后，sql语句中就可以写Param中指定的值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserByIdAndName"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span> <span class="attr">resultType</span>=<span class="string">"com.ecjtu.user.User"</span>&gt;</span></span><br><span class="line">        select * from user where id=#&#123;666&#125; and name=#&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-POJO-amp-Map-amp-TO"><a href="#4-POJO-amp-Map-amp-TO" class="headerlink" title="4.POJO&amp;Map&amp;TO"></a>4.POJO&amp;Map&amp;TO</h3><p><strong>POJO:</strong></p><p>如果多个参数正好是我们业务逻辑的数据模型，我们就可以直接传入POJO</p><p>#{属性名}：取出传入POJO的属性值</p><p><strong>Map：</strong></p><p>如果多个参数不是业务模型中的数据，没有对应的POJO，不经常使用，为了方便我们也可以传入map</p><p>#{Key}:取出map中对应的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口中的方法</span></span><br><span class="line"><span class="function">User <span class="title">queryUserByMap</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,Object&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      map.put(<span class="string">"id"</span>,<span class="number">1</span>);</span><br><span class="line">      map.put(<span class="string">"name"</span>,<span class="string">"mysql"</span>);</span><br><span class="line">      User user = mapper.queryUserByMap(map);</span><br></pre></td></tr></table></figure><p>SQL语句中可以直接使用map中的Key</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserByMap"</span> <span class="attr">resultType</span>=<span class="string">"com.ecjtu.user.User"</span>&gt;</span></span><br><span class="line">        select * from user where id=#&#123;id&#125; and name=#&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-参数处理拓展"><a href="#5-参数处理拓展" class="headerlink" title="5.参数处理拓展"></a>5.参数处理拓展</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">User <span class="title">getUser</span><span class="params">(@Param(<span class="string">"id"</span>)</span><span class="keyword">int</span> id ,String name)</span>;</span><br><span class="line">    取值：id-&gt; #&#123;id/Param1&#125;  ,name-&gt; #&#123;Param2&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">User <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id ,@Param(<span class="string">"us"</span>)</span>User user)</span>;</span><br><span class="line">    取值：id-&gt; #&#123;Param1&#125;  ,name-&gt; #&#123;Param2.name/us.name&#125;</span><br></pre></td></tr></table></figure><p><strong>特别注意</strong>，如果是Collection（List，Set）类型或者是数组，也会特殊处理，也是把传入的list或数组封装在map中。Key：collection     ,如果是List还可以使用Key：list，数组 array</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">User <span class="title">getUserById</span><span class="params">(List&lt;Integer&gt; ids)</span></span>;</span><br><span class="line">取值，取出第一个id的值： #&#123;list[0]&#125;</span><br></pre></td></tr></table></figure><h3 id="6-与-取值区别"><a href="#6-与-取值区别" class="headerlink" title="6.$与#取值区别"></a>6.$与#取值区别</h3><p><strong>#</strong>{}：是以预编译的形式，将参数设置到SQL语句中，防止SQL注入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where id=#&#123;id&#125; and name=#&#123;name&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/12/Mybatis2/C:%5CUsers%5Czhixia%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1582290567085.png" alt="1582290567085"></p><p><strong>$</strong>{}:取出的值直接拼在是SQL语句中，会有安全问题；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where id=$&#123;id&#125; and name=#&#123;name&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/12/Mybatis2/C:%5CUsers%5Czhixia%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1582290777294.png" alt="1582290777294"></p><p>大多数情况下我们使用 #{}取参数</p><p>但是原生的jdbc不支持占位符（？）的地方我们就可以使用<strong>${}</strong>进行取值</p><p>比如分表查询、排序</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from $&#123;year&#125;_salary where xxxx</span><br><span class="line">select * from user order by $&#123;name&#125;</span><br></pre></td></tr></table></figure><h3 id="7-更丰富的用法"><a href="#7-更丰富的用法" class="headerlink" title="7.#{}更丰富的用法"></a>7.#{}更丰富的用法</h3><p>规定参数的一些规则：javaType,jdbcType,mode(存储过程)，resultMap，typeHander,jdbcTypeName。</p><p><strong>jdbcType</strong>需要在某种特定情况下被设置。</p><p>在数据为null时，有些数据库不能识别mybatis对null的默认处理。比如oracle</p><p>由于全局配置中：jdbcTypeForNull=OTHER,oracle不支持，所以<strong>#{}</strong>取值可以有两种方法</p><p>1.#{name,jdbcType=NULL};</p><p>2.在mybatis.xml全集配置中设置jdbcTypeForNULL的值，#{就可以不用写     name,jdbcType=NULL}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"jdbcTypeForNull"</span> <span class="attr">value</span>=<span class="string">"NULL"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-select"><a href="#4-select" class="headerlink" title="4.select"></a>4.select</h2><h3 id="1-返回值类型List"><a href="#1-返回值类型List" class="headerlink" title="1.返回值类型List"></a>1.返回值类型List</h3><p>返回值的类型是List，但是在SQL映射文件中的resultType还是集合中元素的类型，</p><p>这里是User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserBynameLike</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserBynameLike"</span> <span class="attr">resultType</span>=<span class="string">"com.ecjtu.user.User"</span>&gt;</span></span><br><span class="line">    select * from user where name like #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-记录封装Map"><a href="#2-记录封装Map" class="headerlink" title="2.记录封装Map"></a>2.记录封装Map</h3><p>1.返回一条记录的map，Key就是列名，值就是对应的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Map&lt;String,User&gt; <span class="title">getUserReturnMap</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure><p>返回值类型为map</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserReturnMap"</span> <span class="attr">resultType</span>=<span class="string">"java.util.Map"</span>&gt;</span></span><br><span class="line">    select * from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.多条记录封装一个map，键是这条记录的主键，值就是记录封装后的javabean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@MapKey</span>(<span class="string">"name"</span>)</span><br><span class="line"><span class="comment">//    @MapKey("id"),这里指定的MapKey不一样查出的</span></span><br><span class="line">    <span class="function">Map&lt;String,User&gt; <span class="title">getUserByNameLikeReturnMap</span><span class="params">(String name)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByNameLikeReturnMap"</span> <span class="attr">resultType</span>=<span class="string">"java.util.Map"</span>&gt;</span></span><br><span class="line">    select * from user where name like #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以name为MapKey查询结果：其中name  为insert ，mysql就是Key</p><p><img src="/2020/02/12/Mybatis2/1582297068104.png" alt="1582297068104"></p><p>以id 为MapKey查询结果：1,2就是Key</p><p><img src="/2020/02/12/Mybatis2/1582297135413.png" alt="1582297135413"></p><p>这里的 @MapKey(“id”)修改后，Map&lt;String,User&gt;要改为Map&lt;Integer,User&gt;。 </p><h3 id="3-resultMap"><a href="#3-resultMap" class="headerlink" title="3.resultMap"></a>3.resultMap</h3><p>自定义结果映射规则，在SQL语句外</p><!--这里的type写Javabean的相对路径--><pre><code>&lt;resultMap id=&quot;666&quot; type=&quot;com.ecjtu.user.User&quot;&gt;    &lt;!--    指定主键列的封装规则    column：指定哪一列    property：指定对应的javabean属性    --&gt;    &lt;id column=&quot;id&quot; property=&quot;id&quot;&gt;&lt;/id&gt;    &lt;!--column对应数据库的列名，property为javabean中的属性--&gt;    &lt;!-- 其他不指定的列会自动封装    result标签中，如果数据库列名和Javabean属性名一致也可以不写，如果不一致就要写--&gt;    &lt;result column=&quot;name&quot; property=&quot;name&quot;/&gt;</code></pre><p>​    </p><p>这样自定义之后，查询语句中应选择resultMap，且值为resultMap id=”666”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserById"</span> <span class="attr">resultMap</span>=<span class="string">"666"</span> &gt;</span></span><br><span class="line">        select * from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat的再次认识</title>
      <link href="/2020/02/11/Tomcat%E7%9A%84%E5%86%8D%E6%AC%A1%E8%AE%A4%E8%AF%86/"/>
      <url>/2020/02/11/Tomcat%E7%9A%84%E5%86%8D%E6%AC%A1%E8%AE%A4%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat的再次认识"><a href="#Tomcat的再次认识" class="headerlink" title="Tomcat的再次认识"></a>Tomcat的再次认识</h1><h2 id="1-下载tomcat"><a href="#1-下载tomcat" class="headerlink" title="1.下载tomcat"></a>1.下载tomcat</h2><p>官网：<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a></p><p>选择合适的压缩包，比如我的是win10且64字节，我就选64的。</p><p>解压到自己想放的地方。</p><h2 id="2-启动tomcat的方法"><a href="#2-启动tomcat的方法" class="headerlink" title="2.启动tomcat的方法"></a>2.启动tomcat的方法</h2><h4 id="1-双击tomcat-bin-startup-bat（不要关闭这个窗口）"><a href="#1-双击tomcat-bin-startup-bat（不要关闭这个窗口）" class="headerlink" title="(1).双击tomcat/bin/startup.bat（不要关闭这个窗口）"></a>(1).双击tomcat/bin/startup.bat（不要关闭这个窗口）</h4><h4 id="2-在浏览器输入"><a href="#2-在浏览器输入" class="headerlink" title="(2).在浏览器输入"></a>(2).在浏览器输入</h4><blockquote><p>localhost:8080</p></blockquote><blockquote><p>127.0.0.1:8080</p></blockquote><blockquote><p>机主地址:8080</p></blockquote><p>比如我的地址是: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.0.103：8080</span><br></pre></td></tr></table></figure><p>(端口号看个人，可以根据需要去修改)</p><h2 id="3-如何查看本机IP"><a href="#3-如何查看本机IP" class="headerlink" title="3.如何查看本机IP"></a>3.如何查看本机IP</h2><h4 id="1-在CMD中输入"><a href="#1-在CMD中输入" class="headerlink" title="(1).在CMD中输入"></a>(1).在CMD中输入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure><img src="/2020/02/11/Tomcat%E7%9A%84%E5%86%8D%E6%AC%A1%E8%AE%A4%E8%AF%86/Users\Fantastic\AppData\Roaming\Typora\typora-user-images\image-20200117205311744.png" alt="image-20200117205311744" style="zoom: 67%;"><h4 id="2-IPv4地址"><a href="#2-IPv4地址" class="headerlink" title="(2).IPv4地址"></a>(2).IPv4地址</h4><p>比如我的IP为 192.168.1.110（刘钰川的）</p><h2 id="4-tomcat启动可能出现的问题"><a href="#4-tomcat启动可能出现的问题" class="headerlink" title="4.tomcat启动可能出现的问题"></a>4.tomcat启动可能出现的问题</h2><h4 id="1-startup-bat双击后一闪而过："><a href="#1-startup-bat双击后一闪而过：" class="headerlink" title="(1).startup.bat双击后一闪而过："></a>(1).startup.bat双击后一闪而过：</h4><p>原因：没配置好JAVA_HOME环境变量（jdk的目录没有配置到PATH的环境变量里），tomcat找不到jdk；</p><p>解决：用JAVA_HOME替换掉jdk的在PATH中到配置等意的地方。</p><h4 id="2-startup-bat启动报错："><a href="#2-startup-bat启动报错：" class="headerlink" title="(2).startup.bat启动报错："></a>(2).startup.bat启动报错：</h4><p>原因：已经开启了startup.bat，端口号被占用</p><p>解决：</p><h5 id="1-找到占用的端口号，并找到对应的进程，杀死该进程："><a href="#1-找到占用的端口号，并找到对应的进程，杀死该进程：" class="headerlink" title="[1].找到占用的端口号，并找到对应的进程，杀死该进程："></a>[1].找到占用的端口号，并找到对应的进程，杀死该进程：</h5><p>在CMD中输入</p><p>netstat-ano</p><p>得到所有程序的端口号；</p><p>右击任务栏选择管理器，</p><p>在查看中打开PID，</p><p>把PID对应于端口号的进程右击结束，一般选择杀死进程。</p><h5 id="2-修改自身的端口号："><a href="#2-修改自身的端口号：" class="headerlink" title="[2].修改自身的端口号："></a>[2].修改自身的端口号：</h5><p>tomcat/conf/server.xml右击文本打开，</p><p>大致在69行，出现port=”8080”和redirectPort=”8443”随你修改，然后保存；</p><p>大致在116行，也改端口号；</p><p>大致在22行，也改；</p><p>一般会把port改成80，即http协议的默认端口号，访问的时候，就可以不用输入80；</p><p>端口号改了以后，访问的端口号也要记得保持一致。</p><h2 id="5-tomcat的关闭"><a href="#5-tomcat的关闭" class="headerlink" title="5.tomcat的关闭"></a>5.tomcat的关闭</h2><h4 id="1-强制关闭："><a href="#1-强制关闭：" class="headerlink" title="(1).强制关闭："></a>(1).强制关闭：</h4><p>点击x</p><h4 id="2-正常关闭："><a href="#2-正常关闭：" class="headerlink" title="(2).正常关闭："></a>(2).正常关闭：</h4><p>tomcat/bin/shutdown.bat双击</p><p>或者</p><p>tomcat/bin/startup.bat双击开启的窗口里输入Ctrl+c</p>]]></content>
      
      
      <categories>
          
          <category> lyc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomact </tag>
            
            <tag> author-lyc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb学习</title>
      <link href="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="一-web相关概念"><a href="#一-web相关概念" class="headerlink" title="一.web相关概念"></a>一.web相关概念</h1><h2 id="1-软件架构"><a href="#1-软件架构" class="headerlink" title="1.软件架构"></a>1.软件架构</h2><p>​    1.C/S：客户端/服务器端</p><p>​    2.B/S:  浏览器/服务器端</p><h2 id="2-资源分类"><a href="#2-资源分类" class="headerlink" title="2.资源分类"></a>2.资源分类</h2><p>​    1.静态资源：所有用户访问得到的结果一样，静态资源可以被浏览器直接解析。如：HTML，css,js 。</p><p>​    2.动态资源：每个用户访问相同资源得到的结果可能不一样，动态资源被访问后，先转换成静态资源，再返回给    浏览器解析。如：Servlet/jsp , php等。</p><h2 id="3-网络通信三要素"><a href="#3-网络通信三要素" class="headerlink" title="3.网络通信三要素"></a>3.网络通信三要素</h2><p>​    1.IP地址：电脑在网络中的唯一标识。如我的计算机IP地址（ 192.168.0.106）。</p><p>​    2.端口号：应用程序在计算机中的唯一标识。客户端可以通过ip地址找到对应的[服务器端]，但是服务器端是有    很多端口的，每个[应用程序]对应一个端口号，通过类似门牌号的端口号，客户端才能真正的访问到该服务器。    为了对端口进行区分，将每个端口进行了编号，这就是端口号 。</p><p>​    3.传输协议：规定数据传输规则。</p><h1 id="二-Tomcat服务器"><a href="#二-Tomcat服务器" class="headerlink" title="二.Tomcat服务器"></a>二.Tomcat服务器</h1><h2 id="1-Tomcat相关目录文件"><a href="#1-Tomcat相关目录文件" class="headerlink" title="1.Tomcat相关目录文件"></a>1.Tomcat相关目录文件</h2><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1579488348437.png" alt="Tomcat目录"></p><h2 id="2-Tomcat安装及配置"><a href="#2-Tomcat安装及配置" class="headerlink" title="2.Tomcat安装及配置"></a>2.Tomcat安装及配置</h2><p>​    1.下载直接百度Tomcat官网，download下载与自己电脑操作系统位数匹配即可（windows 32x/64x）。</p><p>​    2.安装直接解压下载过来的安装包即可。</p><p>​    3.运行Tomcat服务器，找到bin目录下的startup.bat，点击运行，出现启动时间ms 即配置成功。</p><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1579490264742.png" alt="安装配置"></p><h2 id="3-Tomcat三种项目部署"><a href="#3-Tomcat三种项目部署" class="headerlink" title="3.Tomcat三种项目部署"></a>3.Tomcat三种项目部署</h2><p>​    1.直接将项目放在webapps文件夹下面即可，如我的项目（Demo文件夹里包含Demo1_1.html）。运行此项目，打开bin目录下的startup.bat，启动服务器，在浏览器中输入 <a href="http://localhost:8080/Demo/Demo1_1.html" target="_blank" rel="noopener">http://localhost:8080/Demo/Demo1_1.html</a> 即可运行此项目。</p><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1579533204601.png" alt="1579533204601"></p><p>​    2.在config/service.xml的Host标签中，在浏览器中输入 <a href="http://localhost:8080/zxc/Demo1_1.html" target="_blank" rel="noopener">http://localhost:8080/zxc/Demo1_1.html</a> ，缺点在于易毁坏Tomcat本身的配置文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>（项目部署的路径）=<span class="string">"D:\Program_Files\Database\Demo” path(虚拟路径自己随便取)="</span>/<span class="attr">zxc</span>” /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Host</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>​    3.在\conf\Catalina\localhost目录下自己新建一个项目的配置文件，如test.xml,但是不需要path虚拟路径，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">"D:\BaiduNetdisk\AutoUpdate\Download\Demo"</span>  /&gt;</span></span><br></pre></td></tr></table></figure><p>在浏览器中输入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:8080\test\Demo1_1.html</span><br></pre></td></tr></table></figure><p> 以上每种项目部署方法，都需要重启Tomcat服务器，推荐第3中项目部署方法。</p><h2 id="4-动态项目目录结构"><a href="#4-动态项目目录结构" class="headerlink" title="4.动态项目目录结构"></a>4.动态项目目录结构</h2><p>含有WEB-INF的为动态项目：</p><p>1.web.xml为项目的核心配置文件;</p><p>2.lib目录存放依赖jar包;</p><p>3.classes为存放字节码文件的目录;</p><h2 id="5-Tomcat集成到IDEA"><a href="#5-Tomcat集成到IDEA" class="headerlink" title="5.Tomcat集成到IDEA"></a>5.Tomcat集成到IDEA</h2><p>1.在运行里找–编辑配置，Templates里找到Tomcat Server下的local，点击configure，在Tomcat Home找到Tomcat的安装目录，确定就行。</p><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1579611941546.png" alt="1579611941546"></p><h2 id="6-IDEA中创建Web项目"><a href="#6-IDEA中创建Web项目" class="headerlink" title="6.IDEA中创建Web项目"></a>6.IDEA中创建Web项目</h2><h3 id="①创建web项目"><a href="#①创建web项目" class="headerlink" title="①创建web项目"></a>①创建web项目</h3><p>​    文件（file）-new-项目（project）或者模块（module）-java Enterprise- 勾选Web Application 和Create web.xml - 选择Java EE 8 - Tomcat 7.0.96（自己集成到IDEA的Tomcat版本）</p><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1579612309305.png" alt="1579612309305"></p><h3 id="②运行web项目"><a href="#②运行web项目" class="headerlink" title="②运行web项目"></a>②运行web项目</h3><p>​    先在index.jsp（这里暂时把它当HTML用）的body中输入一些东西，如：hello Tomcat！，点击运行Tomcat。待连接成功后会自动跳转到index的页面。</p><p>index.jsp 是默认的首页，在web,xml中声明的。</p><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1579613959218.png" alt="1579613959218"></p><p>​    也可以在web文件夹下创建xxx.html文件，重启Tomcat（重新运行），在网页输入 <a href="http://localhost:8080/xxx.html" target="_blank" rel="noopener">http://localhost:8080/xxx.html</a> 访问此页面。</p><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1579614715821.png" alt="1579614715821"></p><p>​    为了节省重新连接Tomcat时间，可以在运行配置的server中On ‘<u>U</u>pdate’ action 中选择Update resources，这样运行新文件可以不用重新连接。</p><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1579614295619.png" alt="1579614295619"></p><h1 id="三-Servlet"><a href="#三-Servlet" class="headerlink" title="三.Servlet"></a>三.Servlet</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h2><p>servlet：server applet，运行在服务端的小程序。</p><p>servlet就是一个接口，定义了被浏览器（或Tomcat）识别的Java类的规则。将来我们自定义一个java类，实现servlet接口，复写方法。</p><h2 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2.快速入门"></a>2.快速入门</h2><p><strong>1.创建Java EE项目</strong></p><p><strong>2.定义一个类，实现servlet接口，如ServletDemo类，继承Servlet接口，报红用idea的代码补全。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo1</span> <span class="keyword">implements</span> <span class="title">Servlet</span></span></span><br></pre></td></tr></table></figure><p><strong>3.实现接口中的抽象类，在这里实现servlet中的五个方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo1</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;    &#125;</span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;        <span class="keyword">return</span> <span class="keyword">null</span>;    &#125;</span><br><span class="line">    <span class="comment">//提供服务的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"你好啊！ servlet"</span>);</span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;        <span class="keyword">return</span> <span class="keyword">null</span>;    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.配置servlet</strong></p><p>在web.xml中的<web-app></web-app>标签中配置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1（自己为这个类取得名字）<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>servlet.ServletDemo1（类的全限定名）<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1（访问路径，如：http://localhost:8080/666(自己写的虚拟目录)/demo1（URL））<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置好后，点击运行，输入<a href="http://localhost:8080/666/demo1，就会在控制台打印“你好啊！" target="_blank" rel="noopener">http://localhost:8080/666/demo1，就会在控制台打印“你好啊！</a> servlet” ，在网页每刷新一次就会在控制台打印一次。</p><p>以后会有很多Tomcat项目，可以在运行配置的Application context里自己写虚拟目录（/xxxx，我这里改成666，推荐以项目名称为虚拟目录 ）,如果要调用ServletDemo1（别名为demo1）就输入 <a href="http://localhost:8080/666/demo1" target="_blank" rel="noopener">http://localhost:8080/666/demo1</a>  。</p><h2 id="3-执行原理"><a href="#3-执行原理" class="headerlink" title="3.执行原理"></a>3.执行原理</h2><ul><li><p>当服务器接收到客服端浏览器的请求后，会解析请求的URL路径，如：<a href="http://localhost:8080/666/demo1，获取访问的servlet资源路径" target="_blank" rel="noopener">http://localhost:8080/666/demo1，获取访问的servlet资源路径</a></p></li><li><p>查找web.xml中的<url-partten>标签里的内容，如：</url-partten></p><p><url-pattern>/demo1（访问路径，如：<a href="http://localhost:8080/666/demo1）" target="_blank" rel="noopener">http://localhost:8080/666/demo1）</a></url-pattern></p></li><li><p>如果有，则找到对应的<servlet-class>的全类名，如：</servlet-class></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1（自己为这个类取得名字）<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>servlet.ServletDemo1（类的全限定名）<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Tomcat加载字节码文件进内存，并创建其对象</p></li><li><p>调用其方法</p></li></ul><h2 id="4-Servlet生命周期"><a href="#4-Servlet生命周期" class="headerlink" title="4.Servlet生命周期"></a>4.Servlet生命周期</h2><p><strong>1.被创建：执行 init 方法，只执行一次。</strong></p><ul><li>​    servlet什么时候被创建？</li></ul><p>​        默认情况下为第一次访问时，servlet被创建，我们可以配置执行servlet的创建时机</p><p>​            在<serlvet>标签下配置</serlvet></p><p>​                    <strong>①第一次被访问时创建 <load-on-startup>的值为负数</load-on-startup></strong></p><p>​                        如：<load-on-startup>-1</load-on-startup></p><p>​                        服务器启动后，需要被访问才会调用init方法</p><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1579700917169.png" alt="1579700917169"></p><p>​                    <strong>②在服务器启动时创建<load-on-startup>的值为0或者正整数</load-on-startup></strong></p><p>​                        如：<load-on-startup>5</load-on-startup></p><p>​                        服务器启动时， init 方法打印的 init…. 在启动的日志里</p><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1579700846914.png" alt="1579700846914"></p><ul><li><p><strong>servlet的init方法只执行一次，说明servlet在内存中只存在一个对象，servlet是单例的</strong></p><ul><li><p>多个用户同时访问时，可能存在线程安全问题。</p></li><li><p>解决：尽量不要在servlet中定义成员变量，即使定义了也不要对其修改</p><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1579701509392.png" alt></p></li></ul></li></ul><p><strong>2.提供服务：执行service方法，执行多次。</strong></p><p>​    每次访问servlet时，service方法都会被调用一次</p><p><strong>3.被销毁：执行destroy方法，服务器正常关闭时执行（servlet被销毁之前执行）。</strong></p><h2 id="5-注解配置"><a href="#5-注解配置" class="headerlink" title="5.注解配置"></a>5.注解配置</h2><p>​    servlet 3.0后可以不需要web.xml文件进行配置</p><p><strong>步骤：</strong></p><p>1.创建JavaEE项目，选择servlet3.0以上版本，可以不勾选web.xml</p><p>2.定义一个类，继承Servlet接口</p><p>3.复写接口中的方法</p><p>4.在类上使用@WebServlet注解，进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/servletdemo（自己取的url资源路径名字）"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更简单的注解配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/servletdemo"</span>)</span><br></pre></td></tr></table></figure><p>在浏览器输入 <a href="http://localhost:8080/**servletdemo**（虚拟目录名字）/servletdemo" target="_blank" rel="noopener">http://localhost:8080/**servletdemo**（虚拟目录名字）/servletdemo</a> 即可    </p><h2 id="6-Servlet体系结构"><a href="#6-Servlet体系结构" class="headerlink" title="6.Servlet体系结构"></a>6.Servlet体系结构</h2><p>Servlet–接口</p><p>|</p><p>GenericServlet–抽象类</p><p>|</p><p>HttpServlet–抽象类</p><ul><li>GenericServlet：将Servlet接口中的service()方法作为抽象类，其他方法做了默认空实现，将来定义Servlet类时，可以继承GenericServlet，实现service()方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo2</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要加入其它方法，如 init() 方法，自己在类中添加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>HttpServlet:对Http协议的一种封装，简化操作</p><p>1.定义类继承HttpServlet</p><p>2.复写doGet/doPost方法</p><p><strong>doGet请求方式</strong>：浏览器直接请求</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/demo2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"doget方法被执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>//必要时可以把web.xml 文件删了，以免资源路径重复（我在web.xml中的<servlet-name>也写了“/demo2”）导致Tomcat启动报错。</servlet-name></p><p><strong>doPost请求方式</strong>：目前只有通过表单请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/demo2"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span>（这里指定提交方式为post，如果改成get, ）</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"doPost方法被执行"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1579784560882.png" alt="1579784560882"></p><h2 id="7-servlet-相关配置"><a href="#7-servlet-相关配置" class="headerlink" title="7.servlet 相关配置"></a>7.servlet 相关配置</h2><p>​    <strong>urlPartten:Servlet访问路径：</strong></p><ul><li><p>一个Servlet可以定义多个访问路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(&#123;<span class="string">"/demo2"</span>,<span class="string">"/demo22"</span>,<span class="string">"/demo222"</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>路径定义规则:</p><ol><li>/xxx  : 最常见的</li><li>/xx/xxx : 多层路径，目录结构</li><li>*.xx  或  /xx.xx</li></ol></li></ul><h1 id="四-HTTP协议"><a href="#四-HTTP协议" class="headerlink" title="四.HTTP协议"></a>四.HTTP协议</h1><h2 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1.概念"></a>1.概念</h2><p>HTTP：Hyper  Text Transfer Protocol 超文本传输协议。</p><p>​    <strong>传输协议</strong>：定义了客户端和服务器端通信时发送数据的格式。</p><p>​    <strong>特点</strong>：</p><p>​            1.基于TCP/IP的高级协议；</p><p>​            2.默认端口号是 80；</p><p>​            3.基于请求/响应模型，一次请求对应一次响应</p><p>​            4.无状态的，每次请求之间相互独立，不能交互数据</p><h2 id="2-请求消息数据格式"><a href="#2-请求消息数据格式" class="headerlink" title="2.请求消息数据格式"></a>2.请求消息数据格式</h2><p>​    <strong>1.请求行</strong></p><p>​        请求方式     请求url             请求协议/版本</p><p>​        GET               /login.html        HTTP    /1.1</p><p>​        请求方式：    HTTP中有7种请求方式，常用的2种</p><p>​        <strong>GET：</strong>       1.请求参数在请求行中，url 后。</p><p>​                          2.请求的URL长度有限制</p><p>​                          3.不安全，因为参数会跟在URL后，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/demo2?username=qwer</span><br></pre></td></tr></table></figure><p>​        <strong>POST</strong>：    1.请求参数在请求体中</p><p>​                          2.请求的URL没有长度限制（可用来传输文件）</p><p>​                          3.相对GET安全</p><p>​                          4.提交表单可用ＰＯＳＴ方法</p><p>​    <strong>2.请求头</strong></p><p>​            请求头名称：请求头值       ，就是键值对</p><p>​            常见的请求头：</p><ul><li>User-Agent：访问服务器的浏览器信息，如：User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:71.0) Gecko/20100101 Firefox/71.0</li><li>Referer: 告诉服务器，当前请求从哪里来，如：<a href="http://localhost:8080/login.html" target="_blank" rel="noopener">http://localhost:8080/login.html</a>    <ul><li>作用：防盗链，统计</li></ul></li></ul><p>​    <strong>3.请求空行</strong></p><p>​            就是一个空行，在请求头和请求体起间隔作用，POST方法才有，因为GET请求没有请求体，POST方法有请求体</p><p>​    <strong>4.请求体（正文）</strong></p><p>​            封装POST请求的请求参数</p><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Host: localhost:8080  （请求头，都是键值对）</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:71.0) Gecko&#x2F;20100101 Firefox&#x2F;71.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 12</span><br><span class="line">Origin: http:&#x2F;&#x2F;localhost:8080</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Referer: http:&#x2F;&#x2F;localhost:8080&#x2F;login.html</span><br><span class="line">Cookie: Idea-2ea85be7&#x3D;5dfefb11-22ed-4f7c-9bdd-556c760a5174</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">  （请求空行）</span><br><span class="line">username&#x3D;123  （请求体）</span><br></pre></td></tr></table></figure><h2 id="3-Request"><a href="#3-Request" class="headerlink" title="3.Request"></a>3.Request</h2><h3 id="1-request对象和response对象的原理"><a href="#1-request对象和response对象的原理" class="headerlink" title="1.request对象和response对象的原理"></a><strong>1.request对象和response对象的原理</strong></h3><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1579878481479.png" alt="1579878481479"></p><p>request和response对象是由服务器创建的，我们来使用它</p><p>request对象是来获取请求信息的，response对象是来设置响应信息</p><h3 id="2-request对象继承体系结构："><a href="#2-request对象继承体系结构：" class="headerlink" title="2.request对象继承体系结构："></a><strong>2.request对象继承体系结构</strong>：</h3><p>​        ServletRequest       –接口</p><p>​                    | 继承</p><p>​        HTTPServletRequest   –接口</p><p>​                    |实现</p><p>​        org.apache.catalina.connector.RequestFacade类（Tomcat写的 ）</p><h3 id="3-request功能："><a href="#3-request功能：" class="headerlink" title="3.request功能："></a>3.request功能：</h3><h4 id="1-获取请求消息数据"><a href="#1-获取请求消息数据" class="headerlink" title="1.获取请求消息数据"></a><strong>1.获取请求消息数据</strong></h4><h5 id="1-获取请求行"><a href="#1-获取请求行" class="headerlink" title="1.获取请求行"></a><strong>1.获取请求行</strong></h5><p>GET /Servlet_Demo/demo2?name=123 HTTP/1.1</p><p>方法：</p><p>①.获取请求方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String method = req.getMethod();</span><br></pre></td></tr></table></figure><p>②.（<strong>重要</strong>）获取虚拟目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String contextPath = req.getContextPath();</span><br></pre></td></tr></table></figure><p>③.获取Servlet路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String servletPath = req.getServletPath();</span><br></pre></td></tr></table></figure><p>④.获取get请求参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String queryString = req.getQueryString();</span><br></pre></td></tr></table></figure><p>⑤.获取URI（<strong>重要</strong>） 、URL</p><p>URI:统一资源标识符 ，代表范围比URL大   /Servlet_Demo/requestDemo1     举个栗子：URI是共和国，URL则是中华人民共和国</p><p>URL:统一资源定位符   <a href="http://localhost:8080/Servlet_Demo/requestDemo1" target="_blank" rel="noopener">http://localhost:8080/Servlet_Demo/requestDemo1</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String requestURI = req.getRequestURI();</span><br><span class="line">StringBuffer requestURL = req.getRequestURL();</span><br></pre></td></tr></table></figure><p>⑥.获取协议及版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String protocol = req.getProtocol();</span><br></pre></td></tr></table></figure><p>⑦.获取IP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String remoteAddr = req.getRemoteAddr();</span><br></pre></td></tr></table></figure><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1579881854951.png" alt="1579881854951"></p><p>​    </p><h5 id="2-获取请求头数据"><a href="#2-获取请求头数据" class="headerlink" title="2.获取请求头数据"></a><strong>2.获取请求头数据</strong></h5><p><strong>方法①</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//演示获取请求头数据</span></span><br><span class="line"><span class="comment">//1.获取所有请求头名称</span></span><br><span class="line">Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class="line"><span class="comment">//2.遍历</span></span><br><span class="line"><span class="keyword">while</span> (headerNames.hasMoreElements())&#123;</span><br><span class="line">    String name=headerNames.nextElement();</span><br><span class="line">    String header = request.getHeader(name);</span><br><span class="line">    System.out.println(name+<span class="string">"："</span>+header);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法②</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">※一般用这个 String header = request.getHeader(<span class="string">"user-agent（写你想知道的请求头）"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//演示获取请求头数据：user-agent</span></span><br><span class="line">String header = request.getHeader(<span class="string">"user-agent"</span>);</span><br><span class="line"><span class="comment">//判断agent的浏览器类型</span></span><br><span class="line"><span class="keyword">if</span>(header.contains(<span class="string">"Chrome"</span>))&#123;</span><br><span class="line">System.out.println(<span class="string">"谷歌"</span>);</span><br><span class="line">&#125;<span class="keyword">if</span> (header.contains(<span class="string">"Firefox"</span>))&#123;</span><br><span class="line">System.out.println(<span class="string">"火狐"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//演示获取请求头数据：referer</span></span><br><span class="line">    String referer = request.getHeader(<span class="string">"referer"</span>);</span><br><span class="line">    <span class="comment">//  得从别的链接点进来 http://localhost:8080/login.html    </span></span><br><span class="line">    System.out.println(referer);<span class="comment">//http://localhost:8080/login.html</span></span><br><span class="line">    <span class="comment">//防盗链</span></span><br><span class="line">    <span class="keyword">if</span>(referer!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (referer.contains(<span class="string">"Servlet_Demo"</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">"正常访问"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"你从别的地方来的！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="盗链测试"><a href="#盗链测试" class="headerlink" title="盗链测试"></a><strong>盗链测试</strong></h5><p>1.先新建另一个javaEE模块，用作盗链（DaoLian_Test）,再写daolian.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>盗链测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://localhost:8080/Servlet_Demo/demo5(放你盗取的链接)"</span>&gt;</span>盗取<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.再配置另一个Tomcat服务器，记住要改<strong>JMX port</strong>,跟你的主Tomcat服务器不一样就行，要不然会报端口号已被占用</p><p>3.启动盗链服务器和主Tomcat服务器，打开daolian.html，点击<strong>盗取</strong></p><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1579964276915.png" alt="1579964276915"></p><p>从主服务器来则是</p><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1579964408586.png" alt="1579964408586"></p><h5 id="3-获取请求体数据"><a href="#3-获取请求体数据" class="headerlink" title="3.获取请求体数据"></a><strong>3.获取请求体数据</strong></h5><p>​        请求体：只有POST请求才有请求体，在请求体中封装了POST请求的请求参数；</p><p>​        先写一个register.html注册页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/Servlet_Demo/demo6"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入账号"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span> <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span> <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        步骤：1.获取流对象</p><p>​                    BufferedReader br= req.getReader();  获取字符输入流，只能操作字符数据</p><p>​                    ServletInputStream getInputStream（） ：获取字节输入流，可以操作所有数据类型 </p><p>​                    2.再从流对象中拿数据</p><p>​                    br.readLine()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取字符流</span></span><br><span class="line">    BufferedReader br= req.getReader();</span><br><span class="line">    <span class="comment">//2.读取数据</span></span><br><span class="line">    System.out.println(br.readLine());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-其他功能"><a href="#2-其他功能" class="headerlink" title="2.其他功能"></a>2.其他功能</h4><h5 id="1-获取请求参数通用方式："><a href="#1-获取请求参数通用方式：" class="headerlink" title="1.获取请求参数通用方式："></a>1.获取请求参数通用方式：</h5><p>​        不论是get还是post请求方式都可以使用下列方法获取请求参数</p><p>​        <strong>①（常用）String getParameter(String name)</strong>  :根据请求参数名称获取参数值  username=chenzhixia</p><ul><li><pre><code class="java"><span class="meta">@WebServlet</span>(<span class="string">"/demo7"</span>)<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo7</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{    <span class="meta">@Override</span>    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{        <span class="comment">//post获取请求参数</span>        <span class="comment">//根据请求参数名称获取参数值</span>        String username = request.getParameter(<span class="string">"username"</span>);        System.out.println(<span class="string">"Post方法："</span>+username);    }    <span class="meta">@Override</span>    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>{        System.out.println(<span class="string">"get请求方式过来的"</span>);        <span class="keyword">this</span>.doPost(request,response);    }}&lt;!--￼<span class="number">32</span>--&gt;</code></pre></li></ul><ul><li><pre><code class="java"><span class="comment">//根据请求参数名称获取参数值数组</span>String[] hobbies = request.getParameterValues(<span class="string">"hobby"</span>);<span class="keyword">for</span> (String hobby:hobbies) {    System.out.println(hobby);}&lt;!--￼<span class="number">33</span>--&gt;</code></pre></li></ul><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1580044331601.png" alt="1580044331601"></p><p>④(<strong>常用</strong>)<strong>Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</strong>  获取所有参数的map集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取所有参数的map集合</span></span><br><span class="line">Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line">Set&lt;String&gt; keyset = parameterMap.keySet();</span><br><span class="line"><span class="keyword">for</span> (String name : keyset) &#123;</span><br><span class="line">    System.out.println(name+<span class="string">":"</span>);</span><br><span class="line">    String[] values = parameterMap.get(name);</span><br><span class="line">    <span class="keyword">for</span> (String value : values) &#123;</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"----------------------"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1580045014418.png" alt="1580045014418"></p><p><strong>中文乱码问题</strong>：在获取参数前面加一行代码即可 ：req.setCharacterEncoding(“UTF-8”);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       req.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">       System.out.println(<span class="string">"POST"</span>);</span><br><span class="line">       String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">       System.out.println(username);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="2-请求转发"><a href="#2-请求转发" class="headerlink" title="2.请求转发"></a>2.请求转发</h5><p>​    <strong>1.步骤</strong></p><ul><li><p>使用request对象获取请求转发器对象：RequestDispatcher.getRequestDispatcher(String path);</p></li><li><p>使用RequestDispatcher对象来进行转发：requestDispatcher.forward(request,response);</p></li></ul><p>一种在服务器内部的资源跳转方式，例如：访问A后，A只做一部分，剩下的转发给B做</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RequestDispatcher requestDispatcher=request.getRequestDispatcher(<span class="string">"/demo10(写需要转发到的类的path)"</span>);</span><br><span class="line">requestDispatcher.forward(request,response);(将req,resp转发)</span><br></pre></td></tr></table></figure><p>测试：先写一个demo9类，再写一个demo10类，在</p><p>网页访问demo9，demo9和demo10的doGet请求都被打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/demo9"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo9</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;     </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"demo9被访问"</span>);</span><br><span class="line">        <span class="comment">//转发到demo10</span></span><br><span class="line">        </span><br><span class="line">        RequestDispatcher requestDispatcher=request.getRequestDispatcher(<span class="string">"/demo10"</span>);</span><br><span class="line">        requestDispatcher.forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/demo10"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo10</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"demo10被访问"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1580047404685.png" alt="1580047404685">)<img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1580048994074.png" alt="1580048994074"></p><p>​    <strong>2.特点</strong></p><p>​            1.浏览器地址栏路径不发生变化</p><p>​            2.只能转发当前服务器内部资源中</p><p>​            3.转发是一次请求（在浏览器中F12查看）,可以使用request对象共享数据</p><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1580049517778.png" alt="1580049517778"></p><h5 id="3-共享数据"><a href="#3-共享数据" class="headerlink" title="3.共享数据"></a>3.共享数据</h5><ul><li><p>域对象：一个有作用范围的对象，可以在范围内共享数据</p></li><li><p>request域：代表一次请求的范围，一般用于请求转发的多个资源中共享</p></li><li><p>方法：</p><ul><li><p>void setAttribute(String name,object obj)；存储数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setAttribute(<span class="string">"test"</span>,<span class="string">"hello test"</span>);<span class="comment">//存储数据</span></span><br></pre></td></tr></table></figure></li><li><p>Object getAttribute(String name);通过键来获取值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object test = request.getAttribute(<span class="string">"test"</span>);<span class="comment">//获取数据</span></span><br><span class="line">System.out.println(test);</span><br></pre></td></tr></table></figure></li><li><p>void removeAttribute（String name ）;通过键来移除键值对</p></li></ul></li></ul><h5 id="4-ServletContext对象"><a href="#4-ServletContext对象" class="headerlink" title="4.ServletContext对象"></a>4.ServletContext对象</h5><h6 id="1-概念："><a href="#1-概念：" class="headerlink" title="1.概念："></a>1.概念：</h6><p>​            代表整个Web项目，可以和程序的容器（服务器）来通信</p><h6 id="2-获取："><a href="#2-获取：" class="headerlink" title="2.获取："></a>2.获取：</h6><p>​        1.通过request对象获取      request.getServletContext();</p><p>​        2.通过HttpServlet来获取    this.getServletContext();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//        ServletContext对象获取</span></span><br><span class="line">    <span class="comment">//                1.通过request对象获取</span></span><br><span class="line">    <span class="comment">//                    request.getServletContext();</span></span><br><span class="line">    <span class="comment">//                2.通过HttpServlet获取</span></span><br><span class="line">    <span class="comment">//                    this.getServletContext(); </span></span><br><span class="line">    ServletContext servletContext1 = req.getServletContext();</span><br><span class="line">    ServletContext servletContext2 = <span class="keyword">this</span>.getServletContext();<span class="comment">//推荐使用this.getServletContext</span></span><br><span class="line">    System.out.println(servletContext1);</span><br><span class="line">    System.out.println(servletContext2);</span><br><span class="line">    System.out.println(servletContext1==servletContext2);<span class="comment">//true</span></span><br><span class="line">    <span class="comment">//说明获取到的ServletContext是同一个    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-功能："><a href="#3-功能：" class="headerlink" title="3.功能："></a>3.功能：</h6><p>​        <strong>1.获取MIME类型</strong>：</p><p>​                    MIME类型：在互联网通信过程中定义的一种文件数据类型</p><p>​                              格式：大类型/小类型    text/html       image/jpeg</p><p>​                    获取：String getMimeType(String file)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.通过HttpServlet获取</span></span><br><span class="line">    ServletContext servletContext2 = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    <span class="comment">//2.定义文件名称</span></span><br><span class="line">    String filename=<span class="string">"a.jpg"</span>;</span><br><span class="line">    <span class="comment">//3.获取Mime类型</span></span><br><span class="line">    String mimeType = servletContext2.getMimeType(filename);</span><br><span class="line">    System.out.println(mimeType);  <span class="comment">// image/jpeg</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        <strong>2.域对象：共享数据</strong></p><p>​                1.setAttribute(String name,Object value)</p><p>​                2.getAttribute(String name)</p><p>​                3.removeAttribute(String name)</p><p>​        ServletContext对象范围：所有用户所有请求的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ServletContext3"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletContext3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.通过HttpServlet获取</span></span><br><span class="line">        ServletContext servletContext2 = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        <span class="comment">//2.保存数据</span></span><br><span class="line">        servletContext2.setAttribute(<span class="string">"msg"</span>,<span class="string">"666"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ServletContext4"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletContext4</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.通过HttpServlet获取</span></span><br><span class="line">        ServletContext servletContext2 = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        <span class="comment">//2.获取数据</span></span><br><span class="line">        Object msg = servletContext2.getAttribute(<span class="string">"msg"</span>);</span><br><span class="line">        System.out.println(msg);  <span class="comment">//666</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        <strong>3.获取文件的（服务器）真实路径</strong></p><p>​                1.方法：String getRealPath(String path)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.通过HttpServlet获取</span></span><br><span class="line">    ServletContext servletContext2 = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    <span class="comment">//2.获取文件的服务器路径</span></span><br><span class="line">    String realPath = servletContext2.getRealPath(<span class="string">"/a.txt"</span>);<span class="comment">//web目录下资源访问</span></span><br><span class="line">    System.out.println(realPath);<span class="comment">//D:\Program_Files\Tomcat_Demo\out\artifacts\Tomcat_Demo_war_exploded\a.txt</span></span><br><span class="line">    <span class="comment">//File file=new File(realPath);  这里不加载进内存</span></span><br><span class="line">    String realPath1 = servletContext2.getRealPath(<span class="string">"/WEB-INF/b.txt"</span>);<span class="comment">//WEB-INF目录下的资源访问</span></span><br><span class="line">    System.out.println(realPath1);</span><br><span class="line">    String realPath2 = servletContext2.getRealPath(<span class="string">"/WEB-INF/classes/c.txt"</span>);<span class="comment">//src目录下的资源访问</span></span><br><span class="line">    System.out.println(realPath2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-用户登录"><a href="#4-用户登录" class="headerlink" title="4.用户登录"></a>4.用户登录</h2><h3 id="1-用户登录案例需求："><a href="#1-用户登录案例需求：" class="headerlink" title="1.用户登录案例需求："></a>1.用户登录案例需求：</h3><p>​    1.编写login登录页面</p><p>​    2.使用Druid数据库连接池技术，操作MySQL，login数据库中的user表</p><p>​    3.使用JdbcTemplate技术封装JDBC</p><p>​    4.登陆成功跳转到SuccessServlet，显示登录成功！</p><p>​    5.登录失败跳转到FailServlet，显示登陆失败，用户名或密码错误</p><h3 id="2-开发步骤"><a href="#2-开发步骤" class="headerlink" title="2.开发步骤"></a>2.开发步骤</h3><p>目录结构</p><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1580218495306.png" alt="1580218495306"></p><h4 id="1-编写login-HTML页面，配置文件，jar包"><a href="#1-编写login-HTML页面，配置文件，jar包" class="headerlink" title="1.编写login.HTML页面，配置文件，jar包"></a>1.编写login.HTML页面，配置文件，jar包</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/Login_Test/LoginServlet（/虚拟目录/servlet资源路径）"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入账号"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span> <span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span> <span class="attr">name</span>=<span class="string">"password"</span> /&gt;</span> <span class="tag">&lt;/<span class="name">br</span>&gt;</span>         <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    配置文件 druid.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置数据库的连接参数</span></span><br><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/day14?serverTimezone=UTC&amp;characterEncoding=UTF-8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456789</span></span><br><span class="line"><span class="comment">#url中的day14改写成你要连接的数据库，username和password对应你数据库的用户</span></span><br><span class="line"><span class="comment"># 配置连接池的参数</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">3000</span></span><br><span class="line"><span class="attr">minIdle</span>=<span class="string">3</span></span><br></pre></td></tr></table></figure><p>​    所需要的jar包</p><p>这里注意，<strong>mysql-connector.jar一定要8.0及以上。</strong></p><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1580218299410.png" alt="1580218299410"></p><h4 id="2-创建数据库"><a href="#2-创建数据库" class="headerlink" title="2.创建数据库"></a>2.创建数据库</h4><p>​    create database login;</p><p>​    create table user(</p><p>​    id int primary key auto_increment,</p><p>​    username varchar(30) unique not null,</p><p>​    password varchar(30) not null,</p><p>​    ) </p><h4 id="3-创建user-User类"><a href="#3-创建user-User类" class="headerlink" title="3.创建user.User类"></a>3.创建user.User类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> user;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;        <span class="keyword">return</span> <span class="string">"user.User&#123;"</span> +                <span class="string">"username='"</span> + username + <span class="string">'\''</span> +                <span class="string">", id="</span> + id +                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +                <span class="string">'&#125;'</span>;</span><br><span class="line">                             &#125;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-创建dao-UserDao类，提供login方法"><a href="#4-创建dao-UserDao类，提供login方法" class="headerlink" title="4.创建dao.UserDao类，提供login方法"></a>4.创建dao.UserDao类，提供login方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<span class="keyword">import</span> user.User;</span><br><span class="line"><span class="keyword">import</span> util.JDBCUtils;</span><br><span class="line"><span class="comment">/** * 操作数据库user表类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//声明JDBCTemplate对象公用</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate template=<span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDs());</span><br><span class="line">    <span class="comment">/**登陆方法</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> loginUser</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(User loginUser)</span></span>&#123; </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//1.编写sql</span></span><br><span class="line">            String sql=<span class="string">"select * from user where username=? and password=?"</span>;</span><br><span class="line">            <span class="comment">//2.调用query方法（query中的参数要一一对应！）</span></span><br><span class="line">            User user = template.queryForObject(sql,</span><br><span class="line">                    <span class="keyword">new</span> BeanPropertyRowMapper&lt;User&gt;(User<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">                    <span class="title">loginUser</span>.<span class="title">getUsername</span>()（对应第一个？）, <span class="title">loginUser</span>.<span class="title">getPassword</span>()（对应第二个？）)</span>;</span><br><span class="line">            <span class="keyword">return</span> user;&#125;<span class="keyword">catch</span> (DataAccessException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查询这里捕获异常，要不然账号密码错误会查询结果为0，报错！！</strong></p><h4 id="5-编写JDBCUtils-java工具类"><a href="#5-编写JDBCUtils-java工具类" class="headerlink" title="5.编写JDBCＵtils.java工具类"></a>5.编写JDBCＵtils.java工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="comment">/** * jdbc工具类，使用durid连接池 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DataSource ds;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.加载配置文件</span></span><br><span class="line">            Properties pro=<span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">//使用ClassLoader加载配置文件，获取字节输入流is</span></span><br><span class="line">            pro.load(<span class="keyword">new</span> FileReader(<span class="string">"D:\\Program_Files\\Tomcat_Demo\\Login_Test\\src\\druid.properties"</span>));</span><br><span class="line">            <span class="comment">//2.初始化连接池对象;</span></span><br><span class="line">            <span class="comment">//2.初始化连接池对象;</span></span><br><span class="line">            ds=DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**     * 获取连接池对象     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataSource <span class="title">getDs</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**     * 获取链接connection对象     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ds.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完善第4步</p><h4 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="keyword">import</span> dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> user.User;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLogin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User loginuser=<span class="keyword">new</span> User();</span><br><span class="line">        loginuser.setUsername(<span class="string">"123"</span>);</span><br><span class="line">        loginuser.setPassword(<span class="string">"123"</span>);</span><br><span class="line">        UserDao dao=<span class="keyword">new</span> UserDao();</span><br><span class="line">        User user=dao.login(loginuser);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1580218552623.png" alt="1580218552623"></p><p>7.编写LoginServlet类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> web;<span class="keyword">import</span> dao.UserDao;<span class="keyword">import</span> user.User;<span class="keyword">import</span> javax.servlet.ServletException;<span class="keyword">import</span> javax.servlet.annotation.WebServlet;<span class="keyword">import</span> javax.servlet.http.HttpServlet;<span class="keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/LoginServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.编码</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="comment">//2.获取请求参数</span></span><br><span class="line">        String username=request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String pwd=request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        <span class="comment">//3.封装user对象</span></span><br><span class="line">        User loginUser =<span class="keyword">new</span> User();</span><br><span class="line">        loginUser.setUsername(username);</span><br><span class="line">        loginUser.setPassword(pwd);</span><br><span class="line">        <span class="comment">//4.调用UserDao的login方法</span></span><br><span class="line">        UserDao dao=<span class="keyword">new</span> UserDao();</span><br><span class="line">        User user=dao.login(loginUser);</span><br><span class="line">        <span class="comment">//5.判断user</span></span><br><span class="line">        <span class="keyword">if</span>(user==<span class="keyword">null</span>)&#123; </span><br><span class="line">            <span class="comment">//登陆失败          </span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/FailServlet"</span>).forward(request,response);        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//登陆成功</span></span><br><span class="line">            <span class="comment">//存储数据</span></span><br><span class="line">            request.setAttribute(<span class="string">"user"</span>,user);</span><br><span class="line">            <span class="comment">//转发</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/SuccessServlet"</span>).forward(request,response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.编写FailServlet，SuccessServlet类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> web;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/FailServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FailServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//给页面写一句话</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        response.getWriter().write(<span class="string">"登陆失败，用户名或密码错误"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> web;</span><br><span class="line"><span class="keyword">import</span> user.User;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/SuccessServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuccessServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取request域中共享的user对象</span></span><br><span class="line">        User user= (User) request.getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">if</span> (user!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">            response.getWriter().write(<span class="string">"登陆成功!"</span>+user.getUsername()+<span class="string">"欢迎您！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-BeanUtil工具类，简化数据封装"><a href="#7-BeanUtil工具类，简化数据封装" class="headerlink" title="7.BeanUtil工具类，简化数据封装"></a>7.BeanUtil工具类，简化数据封装</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* //2.获取请求参数 String username = req.getParameter("username");</span></span><br><span class="line"><span class="comment">String password = req.getParameter("password");</span></span><br><span class="line"><span class="comment">//3.封装user对象 User loginUser = new User();</span></span><br><span class="line"><span class="comment">loginUser.setUsername(username);</span></span><br><span class="line"><span class="comment">loginUser.setPassword(password);</span></span><br><span class="line"><span class="comment">*/</span> <span class="comment">//2.获取所有请求参数 </span></span><br><span class="line">Map&lt;String, String[]&gt; parameterMap = req.getParameterMap();</span><br><span class="line">User loginUser=<span class="keyword">new</span> User(); </span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line">    BeanUtils.populate(loginUser,parameterMap);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123; </span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用BeanUtil工具类对对象参数进行封装，简化数据操作。</p><h5 id="7-1-Javabean：标准的java类"><a href="#7-1-Javabean：标准的java类" class="headerlink" title="7.1 Javabean：标准的java类"></a><strong>7.1 Javabean：标准的java类</strong></h5><p>​        <strong>要求：</strong></p><p>​            1.类必须被public修饰</p><p>​            2.必须有无参构造</p><p>​            3.成员变量必须由private修饰</p><p>​            4.提供公共的get set 方法</p><p>​        功能：封装数据</p><h5 id="7-2概念："><a href="#7-2概念：" class="headerlink" title="7.2概念："></a><strong>7.2概念</strong>：</h5><p>​            成员变量，如：username，id,password</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br></pre></td></tr></table></figure><p>​            属性：set ，get方法截取后的产物，如：getUsername –&gt;Username–&gt;username</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-3方法"><a href="#7-3方法" class="headerlink" title="7.3方法"></a><strong>7.3方法</strong></h5><p>​        1.setProperty()</p><p>​        2.getProperty()</p><p>​        3.populate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;<span class="keyword">import</span> user.User;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanUtilTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException </span>&#123;</span><br><span class="line">        User user=<span class="keyword">new</span> User();</span><br><span class="line">        BeanUtils.setProperty(user,<span class="string">"username"</span>,<span class="string">"zxc"</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        String password = BeanUtils.getProperty(user, <span class="string">"username"</span>);</span><br><span class="line">        System.out.println(password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1580304576428.png" alt="1580304576428"></p><h2 id="5-Response"><a href="#5-Response" class="headerlink" title="5.Response"></a>5.Response</h2><p>概念：服务器端发送给客户端的数据</p><p>数据格式：</p><p>1.响应行</p><p>​    1.组成：协议/版本   响应状态码    状态码描述</p><p>​    2.响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态</p><p>​            1.状态码都是3位数字</p><p>​            2.分类：</p><ul><li>1xx : 服务器接收客户端消息，但没有完成，等待一段时间后，发送1xx状态码</li><li>2xx ：成功 如：200</li><li>3xx : 重定向  如：302   304（访问缓存）</li><li>4xx :  客户端错误  如：404 （请求路径没有对应的资源），405（请求方式没有对应的doXX(doPost/doGet)）</li><li>5xx ：服务器段错误  如：500（服务器内部异常）</li></ul><p>2.响应头</p><p>​    1.格式：头名称 ：值</p><p>​    2.常见的响应头：</p><p>​        Content-Type：服务器告诉客户端本次响应体的数据格式和编码格式</p><p>​        Content-disposition：服务器告诉客户端以什么格式打开响应体数据</p><p>​                值:  in-line :默认值，在当前页面内打开</p><p>​                        attachment；filement=xxx:以附件形式打开响应体。常用于文件下载</p><p>​        </p><p>3.响应空行</p><p>4.响应体：传输的数据</p><p>HTTP/1.1     200                 OK                  //请求行</p><p>协议/版本   响应状态码    状态码描述</p><p>Server: Apache-Coyote/1.1  //请求头 键值对<br>Set-Cookie: JSESSIONID=D6B7B43017EA0E262287174B30555D71; Path=/Login_Test; HttpOnly<br>Content-Type: text/html;charset=UTF-8<br>Content-Length: 98<br>Date: Wed, 29 Jan 2020 14:26:53 GMT</p><p>//响应空行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>  //响应体</span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>$Title$<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        hello,responce</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-Response对象"><a href="#1-Response对象" class="headerlink" title="1.Response对象"></a>1.Response对象</h3><h4 id="1-功能：设置响应消息"><a href="#1-功能：设置响应消息" class="headerlink" title="1.功能：设置响应消息"></a><strong>1.功能</strong>：设置响应消息</h4><p>​        1.设置响应行</p><p>​                1.格式：HTTP/1.1  200  ok</p><p>​                2.设置状态码 ：setStatus（int sc）                </p><p>​        2.设置响应头 : setHeader(String  name, String value )</p><p>​        3.设置响应体 :  </p><p>​                1.获取输出流：</p><p>​                        字符输出流：PrinterWriter getWriter()</p><p>​                        字节输出流：ServletOutPutStream getOutPutStream()</p><p>​                2.使用输出流，将数据输出到客户端浏览器</p><h5 id="2-案例："><a href="#2-案例：" class="headerlink" title="2.案例："></a>2.案例：</h5><h6 id="1-完成重定向"><a href="#1-完成重定向" class="headerlink" title="1.完成重定向"></a><strong>1.完成重定向</strong></h6><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1580391867342.png" alt="1580391867342"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ResponseDemo1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseDemo1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ResponseDemo1被访问"</span>);</span><br><span class="line">        <span class="comment">//访问ResponseDemo1，会自动跳转到ResponseDemo2</span></span><br><span class="line">        <span class="comment">//1.设置状态码</span></span><br><span class="line">        <span class="comment">//response.setStatus(302);</span></span><br><span class="line">        <span class="comment">//2.设置响应头location</span></span><br><span class="line">       <span class="comment">// response.setHeader("location","/Response/ResponseDemo2");</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//简单的重定向，只需要写路径</span></span><br><span class="line">        response.sendRediect(<span class="string">"/Response/ResponseDemo2"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ResponseDemo2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseDemo2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doGet(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ResponseDemo2被访问"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-重定向的特点：redirect"><a href="#2-重定向的特点：redirect" class="headerlink" title="2.重定向的特点：redirect"></a><strong>2.重定向的特点：</strong>redirect</h6><p>​                                            1.地址栏发生变化</p><p>​                                           2.重定向可以访问其他站点（服务器）的资源</p><p>​                                            3.重定向是两次请求，不能使用request对象共享数据</p><p>​            <strong>转发的特点：</strong>forward</p><p>​                                    1.浏览器地址栏路径不发生变化</p><p>​                                    2.只能转发当前服务器内部资源中</p><p>​                                    3.转发是一次请求（在浏览器中F12查看）,可以使用request对象共享数据</p><h6 id="路径写法："><a href="#路径写法：" class="headerlink" title="路径写法："></a><strong>路径写法：</strong></h6><p>​            1.路径分类：</p><ul><li><p>​        相对路径：通过相对路劲不确定唯一资源，找到访问当前资源和目标资源之间的相对位                                                                置关系</p></li><li><p>​        相对路径规则：    . /  代表当前目录                . . /  代表上一级目录</p><p>​                            如：   . /index.html    ，不以/开头，以  .  开头</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"../ResponseDemo2"</span>&gt;</span>上一级的相对路径 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"ResponseDemo2"</span>&gt;</span>当前路径写法一<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"./ResponseDemo2"</span>&gt;</span>当前路径写法二<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>​        绝对路径：通过绝对路径可以确定唯一资源，</li><li>​        绝对路径规则：判断定义的路径是给谁用的？判断请求从哪儿发出</li></ul><p>​            ①给客户端浏览器使用，需要加虚拟目录（项目的访问路径），建议虚拟目录动态获取  ,getContextPath();</p><p>​                <a herf="xxxx">标签，<form> ,重定向等。</form></a></p><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1580476620004.png" alt="1580476620004"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//动态获取虚拟目录</span></span><br><span class="line">String contextPath = request.getContextPath();</span><br><span class="line"><span class="comment">//response.sendRedirect("Response/ResponseDemo2");</span></span><br><span class="line"><span class="comment">//这样用getContextPath动态虚拟目录，就不会写死代码，只改Application context就行了</span></span><br><span class="line">response.sendRedirect(contextPath+<span class="string">"/ResponseDemo2"</span>);</span><br></pre></td></tr></table></figure><p>​            ②给服务器使用：不需要加虚拟目录，如转发路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RequestDispatcher requestDispatcher=request.getRequestDispatcher(<span class="string">"/demo10"</span>);</span><br><span class="line">requestDispatcher.forward(request,response);</span><br></pre></td></tr></table></figure><p>​    如： <a href="http://localhost:8080/Response/ResponseDemo1" target="_blank" rel="noopener">http://localhost:8080/Response/ResponseDemo1</a> </p><h4 id="2-服务器输出字符数据到客户端"><a href="#2-服务器输出字符数据到客户端" class="headerlink" title="2.服务器输出字符数据到客户端"></a>2.服务器输出字符数据到客户端</h4><p>​    1.获取字符输出流</p><p>​    2.输出数据</p><p>​    3.乱码问题 ：要在获取留之前设置        <strong>response.setContentType(“text/html;charset=utf-8”);</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">      <span class="comment">//获取对象之前，设置流的默认编码</span></span><br><span class="line">       <span class="comment">//response.setCharacterEncoding("GBK");  浏览器默认的GBK编码</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//告诉浏览器，服务器发送的消息体数据的编码，建议浏览器使用该编码</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// response.setHeader("content-type","text/html;charset=utf-8");</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//简单的形式设置编码</span></span><br><span class="line">       response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">       <span class="comment">//1.获取字符输出流</span></span><br><span class="line">       PrintWriter pw = response.getWriter();</span><br><span class="line">       <span class="comment">//2.输出数据</span></span><br><span class="line">       pw.write(<span class="string">"大1佬666!"</span>);</span><br><span class="line">       <span class="comment">//简写</span></span><br><span class="line">       response.getWriter().write(<span class="string">"hello ResponseDemo3"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="3-服务器输出字节数据到客户端"><a href="#3-服务器输出字节数据到客户端" class="headerlink" title="3.服务器输出字节数据到客户端"></a>3.服务器输出字节数据到客户端</h4><p>​    1.获取字节输出流</p><p>​    2.输出数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">    <span class="comment">//获取字节输出流</span></span><br><span class="line">    ServletOutputStream oso = response.getOutputStream();</span><br><span class="line">    oso.write(<span class="string">"你好啊"</span>.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-验证码"><a href="#4-验证码" class="headerlink" title="4.验证码"></a>4.验证码</h4><p>​        本质：图片</p><p>​        目的：防止恶意表单注册</p><p>实现：原理跟我们手动画图一样，先画个图（矩形为例），再加个框（加不加无所谓，美化作用），在往矩形里写            字符，再画干扰线</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;<span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/CheckCode"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckCode</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> width=<span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> height=<span class="number">50</span>;</span><br><span class="line">        <span class="comment">//1.创建图片对象</span></span><br><span class="line">        BufferedImage bi=<span class="keyword">new</span> BufferedImage(width,height,BufferedImage.TYPE_3BYTE_BGR);</span><br><span class="line">        <span class="comment">//2.美化图片 </span></span><br><span class="line">        <span class="comment">//填充背景颜色</span></span><br><span class="line">        Graphics graphics=bi.getGraphics();</span><br><span class="line">        <span class="comment">//画笔对象</span></span><br><span class="line">        graphics.setColor(Color.PINK);  <span class="comment">//设置画笔颜色</span></span><br><span class="line">        graphics.fillRect(<span class="number">0</span>,<span class="number">0</span>,width,height);</span><br><span class="line">        <span class="comment">//画边框</span></span><br><span class="line">        graphics.setColor(Color.BLUE);<span class="comment">//设置画笔颜色</span></span><br><span class="line">        graphics.drawRect(<span class="number">0</span>,<span class="number">0</span>,width-<span class="number">1</span>,height-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//写验证码</span></span><br><span class="line">        graphics.setColor(Color.BLACK);</span><br><span class="line">        String str=<span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"</span>;</span><br><span class="line">        Random ran=<span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">4</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index=ran.nextInt(str.length()); <span class="comment">//设置随机数的最大值</span></span><br><span class="line">            <span class="keyword">char</span> ch=str.charAt(index);           <span class="comment">//获取随机字符</span></span><br><span class="line">            graphics.drawString(ch+<span class="string">""</span>,width/<span class="number">5</span>*i,<span class="number">25</span>);</span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//画干扰线</span></span><br><span class="line">        graphics.setColor(Color.gray);  <span class="comment">//设置画笔颜色</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">7</span> ; i++) &#123; </span><br><span class="line">            <span class="keyword">int</span> pointx1=ran.nextInt(width);</span><br><span class="line">            <span class="keyword">int</span> pointy1=ran.nextInt(height);</span><br><span class="line">            <span class="keyword">int</span> pointx2=ran.nextInt(width);</span><br><span class="line">            <span class="keyword">int</span> pointy2=ran.nextInt(height);</span><br><span class="line">            graphics.drawLine(pointx1,pointy1,pointx2,pointy2);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//3.输出图片</span></span><br><span class="line">        ImageIO.write(bi,<span class="string">"jpg"</span>,response.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>验证码<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//1.获取图片对象</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> img=<span class="built_in">document</span>.getElementById(<span class="string">"checkCode"</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//2.绑定单击事件</span></span></span><br><span class="line"><span class="actionscript">                img.onclick=<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> date=<span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line"><span class="actionscript">                    img.src=<span class="string">"/Response/CheckCode?"</span>+date;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"checkCode"</span> <span class="attr">src</span>=<span class="string">"/Response/CheckCode"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"change"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>看不清换一张<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-文件下载案例"><a href="#6-文件下载案例" class="headerlink" title="6.文件下载案例"></a>6.文件下载案例</h2><h3 id="1-需求"><a href="#1-需求" class="headerlink" title="1.需求"></a>1.需求</h3><p>​                页面显示超链接，点击超链接后弹出下载框，完成图片文件下载</p><h3 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h3><p>​               ①超链接指向的资源如果能够被浏览器解析，则在浏览器显示，如果不能，则弹出下载框。</p><p>​               ②任何资源都必须弹出下载框</p><p>​               ③使用响应头设置资源的打开方式:content-disposition:attachment;filename=xxx</p><h3 id="3-步骤"><a href="#3-步骤" class="headerlink" title="3.步骤"></a>3.步骤</h3><p>​    1.定义页面，编辑超链接href属性，指向servlet，传递资源名称filename</p><p>​    2.定义servlet</p><p>​            ①获取文件名称</p><p>​            ②使用字节输入流加载文件进内存</p><p>​            ③指定response的响应头： content-disposition:attachment;filename=xxx </p><p>​            ④将数据写到response输出流</p><h3 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4.代码实现"></a>4.代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> download;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletInputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/DownLoad"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownLoad</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">///1.获取请求参数，文件名称</span></span><br><span class="line">        String filename = request.getParameter(<span class="string">"filename"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.使用字节输入流加载文件进内存</span></span><br><span class="line">        <span class="comment">//2.1找到文件真实路径</span></span><br><span class="line">        ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String realPath = servletContext.getRealPath(<span class="string">"/img/"</span>+filename);</span><br><span class="line">        <span class="comment">//2.2用字节流关联</span></span><br><span class="line">        FileInputStream fileInputStream=<span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.1设置响应头类型：content-type</span></span><br><span class="line">        String mimeType = servletContext.getMimeType(filename);<span class="comment">//获取文件的mime类型</span></span><br><span class="line">        response.setHeader(<span class="string">"content-type"</span>,mimeType);</span><br><span class="line">        <span class="comment">//3.2设置响应头的打开方式：content-disposition</span></span><br><span class="line">        response.setHeader(<span class="string">"content-disposition"</span>,<span class="string">"attachment;filename="</span>+filename);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.将输入流数据写到输出流中</span></span><br><span class="line">        ServletOutputStream outputStream = response.getOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buff=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len=fileInputStream.read(buff))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            outputStream.write(buff,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>download<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"img/1.jpg"</span>&gt;</span>普雷<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"img/2.mp4"</span>&gt;</span>视频<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/Response666（IDEA中web项目默认访问路径Application Context）/DownLoad(@WebServlet("</span>/<span class="attr">DownLoad</span>"))?<span class="attr">filename</span>=<span class="string">2.mp4</span>"&gt;</span>视频<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/Response666/DownLoad?filename=1.jpg"</span>&gt;</span>普雷<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-中文文件名问题"><a href="#5-中文文件名问题" class="headerlink" title="5.中文文件名问题"></a>5.中文文件名问题</h3><p>解决：1.获取客户端使用的浏览器版本信息</p><p>​            2.根据不同的版本信息，设置filename不同的编码方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Encoder;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownLoadUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFileName</span><span class="params">(String agent, String filename)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (agent.contains(<span class="string">"MSIE"</span>)) &#123;</span><br><span class="line">            <span class="comment">// IE浏览器</span></span><br><span class="line">            filename = URLEncoder.encode(filename, <span class="string">"utf-8"</span>);</span><br><span class="line">            filename = filename.replace(<span class="string">"+"</span>, <span class="string">" "</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (agent.contains(<span class="string">"Firefox"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 火狐浏览器</span></span><br><span class="line">            BASE64Encoder base64Encoder = <span class="keyword">new</span> BASE64Encoder();</span><br><span class="line">            filename = <span class="string">"=?utf-8?B?"</span> + base64Encoder.encode(filename.getBytes(<span class="string">"utf-8"</span>)) + <span class="string">"?="</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 其它浏览器</span></span><br><span class="line">            filename = URLEncoder.encode(filename, <span class="string">"utf-8"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filename;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line">  <span class="comment">//3.2设置响应头的打开方式：content-disposition</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//解决中文文件名问题</span></span><br><span class="line">        <span class="comment">//1.获取请求头 user-agent</span></span><br><span class="line">        String agent = request.getHeader(<span class="string">"user-agent"</span>);</span><br><span class="line">        <span class="comment">//2.实用工具类方法编码文件</span></span><br><span class="line">        filename = DownLoadUtils.getFileName(agent, filename);</span><br><span class="line"></span><br><span class="line">        response.setHeader(<span class="string">"content-disposition"</span>,<span class="string">"attachment;filename="</span>+filename);</span><br></pre></td></tr></table></figure><h3 id="6-注意事项"><a href="#6-注意事项" class="headerlink" title="6.注意事项"></a>6.注意事项</h3><p>特别要注意获取文件的真实路径 getRealPath，具体路径写法，看 <strong>ServletContext对象</strong> 功能中第<strong>3</strong>条</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String realPath = servletContext.getRealPath(<span class="string">"/img/"</span>+filename);</span><br></pre></td></tr></table></figure><p>如果发现报500（其中是中文文件名加载乱码），请跟换Tomcat服务器版本8.0或以上</p><p><img src="/2020/02/04/Javaweb%E5%AD%A6%E4%B9%A0/1580916183085.png" alt="1580916183085"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
