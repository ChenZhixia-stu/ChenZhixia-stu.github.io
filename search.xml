<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Tomcat和web结合</title>
      <link href="/2020/02/02/Tomcat%E5%92%8Cweb%E7%BB%93%E5%90%88/"/>
      <url>/2020/02/02/Tomcat%E5%92%8Cweb%E7%BB%93%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat和web结合"><a href="#Tomcat和web结合" class="headerlink" title="Tomcat和web结合"></a>Tomcat和web结合</h1><h2 id="一、单纯和网页"><a href="#一、单纯和网页" class="headerlink" title="一、单纯和网页"></a>一、单纯和网页</h2><h3 id="1-基础部署方式（开发者）："><a href="#1-基础部署方式（开发者）：" class="headerlink" title="1.基础部署方式（开发者）："></a>1.基础部署方式（开发者）：</h3><p>新建(路径)：</p><p>tomcat/webapps/新建文件夹/新建.html文件</p><p>查看(虚拟目录)：</p><p>输入地址/新建文件夹名/新建.html文件名</p><p>比如：</p><img src="C:\Users\Fantastic\AppData\Roaming\Typora\typora-user-images\image-20200117215243800.png" alt="image-20200117215243800"  /><img src="C:\Users\Fantastic\AppData\Roaming\Typora\typora-user-images\image-20200117213820614.png" alt="image-20200117213820614" style="zoom:67%;" /><h3 id="2-更加简化的部署（运行和维护人员）："><a href="#2-更加简化的部署（运行和维护人员）：" class="headerlink" title="2.更加简化的部署（运行和维护人员）："></a>2.更加简化的部署（运行和维护人员）：</h3><p>修改：</p><p>把写好的.html文件打包成.war包，复制到webapps里（这步伴随war包的自动解压，新建文件夹和.html文件）；</p><p>而删除.war包，会伴随相应文件的删除哦。</p><p>查看：</p><p>输入地址/新建文件夹名/新建.html文件名</p><h3 id="3-更方便的部署（运行和维护人员）："><a href="#3-更方便的部署（运行和维护人员）：" class="headerlink" title="3.更方便的部署（运行和维护人员）："></a>3.更方便的部署（运行和维护人员）：</h3><p>(1).使用tomcat自带的.xml文件</p><p>修改：</p><p>文本打开tomcat/conf/server.xml（应确保startup.bat已经关闭），找到并修改，保存，关闭一条龙：</p><HOST><!--标签里面部署项目--><Cntext docBase="D:\software\tomcat9.0\webapps\hello" path="/lyc"/></HOST><p>其中docBase是.html在本地的目录，path是虚拟目录。</p><p><img src="C:%5CUsers%5CFantastic%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200117215212801.png" alt="image-20200117215212801"></p><p>然后startup.bat启动tomcat地址变成：</p><p>查看：</p><p>输入地址/path对应的虚拟路径/.html文件</p><p>比如：</p><p>localhost:8080/lyc/hello.html</p><p>(2).还可以自己新建.xml文件</p><p>新建：</p><p>tomcat/conf/Catalina/localhost/新建.xml文件，文本打开文件并在文件内写：</p><Cntext docBase="D:\software\tomcat9.0\webapps\hello"/><p>其中没有path（虚拟路径）,</p><p>查看：</p><p>输入地址/新建.xml文件名/.html文件名</p><p>另外：</p><p>修改成.xml_bak文件，即每开一次服务器，可使用该文件部署的.html文件一次。</p><h2 id="二、动态项目"><a href="#二、动态项目" class="headerlink" title="二、动态项目"></a>二、动态项目</h2><h3 id="1-部署tomcat于项目"><a href="#1-部署tomcat于项目" class="headerlink" title="1.部署tomcat于项目"></a>1.部署tomcat于项目</h3><p>(1).用maven创建webapp项目，在ProjectStructure添加library添加jar：</p><p>目录结构：</p><p>–项目的根目录web</p><p>​     –Sources Root和WEB-INF并排</p><p>​     –web即WEB-INF目录（有该目录的项目被称为动态项目）:</p><p>​              – web.xml:web项目的核心配置文件</p><p>​              –classes目录：放置字节码文件的目录（可以不在这里，在target里面）</p><p>​              –lib目录：放置依赖的jar包（可以不在这里，在External Libraries里面）</p><p>​                        servlet-api-3.1.0.jar（接口Servlet）</p><p>​                        jsp-api-2.0.jar</p><p>​                       mysql-connector-java-5.1.47-bin.jar（连接数据库）</p><p>​            –若新建.html文件在这里，则Run/Debug Configurations的Smart Tomcat的Deployment Directory选中该项目的WEB-INF</p><p>​    –新建.html文件在这里</p><p>​    –index.jsp（相当于html页面）</p><p>(2)部署tomcat：</p><ul><li><p>Run/Debug Configurations的Smart Tomcat的Deployment Directory选中该项目（如果没有做这一步会报错com.intellij.execution.ExecutionException: The Module Root specified is not a module according to Intellij）</p><p>比如我的就是：</p><p>D:\project\javaLearn20110\src\main\webapp</p></li><li><p>勾选After launch，运行项目的时候就会在控制台显示这个项目的访问地址，就可以在浏览器手动指定要访问的.html文件</p><p>比如：</p><p><a href="http://localhost:8080/javaLearn20110/LoginIndex.html" target="_blank" rel="noopener">http://localhost:8080/javaLearn20110/LoginIndex.html</a></p><p>如果只选中项目，则可以在index.jsp里面写html页面，通过<a href="http://localhost:8080/javaLearn20110/或者http://localhost:8080/javaLearn20110/index.jsp来访问。" target="_blank" rel="noopener">http://localhost:8080/javaLearn20110/或者http://localhost:8080/javaLearn20110/index.jsp来访问。</a></p><p>如果，你不想勾选，你就自己想</p></li></ul><p>(3).部署tomcat于项目后，没有target解决办法:</p><p>Project Settings–&gt;Artifacts–&gt;+–&gt;javaFx Application–&gt;choose your project</p><p>并勾选Include in project build</p><p>(4).当你修改html页面后，而网页并没有修改，重启一下你的IDEA</p><h3 id="2-Servlet入门"><a href="#2-Servlet入门" class="headerlink" title="2.Servlet入门"></a>2.Servlet入门</h3><p>(1).用maven创建webapp项目，创建JavaEE项目，在Sources Root目录下新建/web/servlet/ServletDemo1；</p><p>(2).定义一个类implements Servlet，实现Servlet接口（注意导入servlet-api.jar，不然会认不出Servlet），即：public class ServletDemo1 implements Servlet；</p><p>servlet就是一个接口，定义了java类被浏览器访问到（tomcat识别）的规则；</p><p>(3).实现接口的5个方法Alt+Enter，类ServletDemo1中service(ServletRequest servletRequest, ServletResponse servletResponse)方法是提供服务的，可以在里面写东西:比如写System.out.println(“Hello Servlet”);</p><p>(4).配置Servlet（Run/Debug Configurations定位到项目的webapp）</p><ul><li>Servlet第一种配置，在web.xml文件进行配置，在webapp容器内添加：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;         xmlns&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee&quot;         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_2_5.xsd&quot;         </span><br><span class="line">id&#x3D;&quot;WebApp_ID&quot; version&#x3D;&quot;2.5&quot;&gt;  </span><br><span class="line">&lt;servlet&gt;    </span><br><span class="line">&lt;servlet-name&gt;demo1&lt;&#x2F;servlet-name&gt;    </span><br><span class="line">&lt;servlet-class&gt;servlet.ServletDemo1&lt;&#x2F;servlet-class&gt;  </span><br><span class="line">&lt;&#x2F;servlet&gt;  </span><br><span class="line">&lt;servlet-mapping&gt;    </span><br><span class="line">&lt;servlet-name&gt;demo1&lt;&#x2F;servlet-name&gt;    </span><br><span class="line">&lt;url-pattern&gt;&#x2F;demo1&lt;&#x2F;url-pattern&gt;  </span><br><span class="line">&lt;&#x2F;servlet-mapping&gt;</span><br><span class="line">&lt;&#x2F;web-app&gt;</span><br></pre></td></tr></table></figure><ul><li><p>其中:</p><ul><li><p>后文基于Servlet2.5版本：</p><p><servlet-name>给此servlet取名</servlet-name>;</p><p><servlet-class>指定class类的路径即全类名，从sources root文件下开始指定</servlet-class>;</p><p><servlet-name>指定哪个servlet</servlet-name>;</p><p><url-pattern>给指定的servlet设置虚拟路径</url-pattern>。</p></li><li><p>Servlet第二种配置，如果用的是Servlet3.0版本时：</p><p>支持注解配置，可以不用web.xml了</p><p>步骤：</p><ol><li><p>创建JavaEE项目，选择Servlet的版本3.0以上，可以不创建web.xml</p></li><li><p>定义一个类，实现Servlet接口</p></li><li><p>在类上使用一个@WebServlet(“写资源名称”)注解，进行配置:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/demo"</span>)</span><br><span class="line">&lt;!--或者--&gt;</span><br><span class="line"><span class="meta">@WebServlet</span>(urlPatterns=<span class="string">"/demo"</span>)</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5CFantastic%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200119192510334.png" alt="image-20200119192510334"></p></li></ol></li></ul></li></ul><ul><li>运行效果：</li></ul><img src="C:\Users\Fantastic\AppData\Roaming\Typora\typora-user-images\image-20200118171134386.png" alt="image-20200118171134386" style="zoom:67%;" /><img src="C:\Users\Fantastic\AppData\Roaming\Typora\typora-user-images\image-20200118171652371.png" alt="image-20200118171652371"  /><p>当服务器接收到客户端浏览器的请求后，会解析请求URL路径，获取访问Servlet的资源路径即/demo1；</p><p>​    查找web.xml文件，是否有对应的<url-pattern>标签体内容和资源路径一致即demo1；</p><p>​        如果有，则在找到对应的<servlet-class>全类名，tomcat将全类名对应的字节码文件加载进内存</p><p>​      （Class.forName()）并创建对象（class.newInstance()），然后调用方法。</p><p>(5).Servlet中的5个方法的说明：</p><p>[1].Servlet被创建：执行init方法，只执行一次：</p><p>Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的；</p><ul><li>​    问题：多个用户访问时，可能存在安全问题；</li><li>​    解决：尽量不要在Servlet中定义成员变量，即使定义了一个成员变量就不要对它修改，但是可以定义局部变量。</li></ul><p>Servlet什么时候被创建？</p><ul><li>默认情况，第一次被访问时，Servlet被创建</li><li>可以配置执行Servlet的创建时机：在<servlet></servlet>标签里添加<load-on-startup></load-on-startup><ul><li>第一次被访问时(就是在浏览器)，创建，<load-on-startup>值为负整数</load-on-startup>，默认值为-1;</li><li>在服务器启动时(就是启动项目)，创建，<load-on-startup>值为0或正整数</load-on-startup>;</li></ul></li></ul><p>[2].Servlet提供服务：执行service方法，执行多次：</p><p>每次浏览器访问Servlet时，service方法都会被调用一次。</p><p>[3].Servlet被销毁：执行destroy方法，只执行一次：</p><p>服务器被正常关闭时，执行destroy方法后，Servlet被销毁。</p><h3 id="3-步入Servlet"><a href="#3-步入Servlet" class="headerlink" title="3.步入Servlet"></a>3.步入Servlet</h3><ol><li><p>Servlet–接口</p></li><li><p>GenericServlet–抽象类：</p><p>将Servlet接口中其他的方法做了默认空实现，只将service()方法做为抽象；</p><p>将来定义Servlet类时，可以继承GenericServlet，可以只实现service()方法。</p></li><li><p>HttpServlet–抽象类：</p><p>对http协议的一种封装，简化操作：</p><ul><li><p>定义类继承HttpServlet：public class servletDemo3 extends HttpServlet；</p></li><li><p>用第二种简便方法配置Servlet，即在方法上添加@WebServlet(“/xxx”)，</p><p>也可以定义多个访问路径@WebServlet({“访问路径1”,”访问路径2”,”/xxx”})，如：@WebServlet({“/d4”,”/dd4”,”/ddd4”})，</p><p>若把访问路径写成”/lyc/*”，则在浏览器访问可用 /lyc/任何字符 来访问，</p><p>特殊的配置写法@WebServlet(“*.do”)，在浏览器里写xx.do可以访问。</p></li><li><p>复写doGet/doPost方法：输入doPost和doGet用Alt+Enter，复写方法；</p><ul><li><p>启动项目，浏览器输入@WebServlet后的urlPatterns，如：<a href="http://localhost:8080/javaLearn20119/demo3，则调用doGet方法。" target="_blank" rel="noopener">http://localhost:8080/javaLearn20119/demo3，则调用doGet方法。</a></p></li><li><p>启动项目，浏览器输入webapp文件下的.html文件名，如：<a href="http://localhost:8080/javaLearn20119/Login.html，则调用doPost方法。" target="_blank" rel="noopener">http://localhost:8080/javaLearn20119/Login.html，则调用doPost方法。</a></p><p>其中Login.html文件核心内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;&#x2F;javaLearn20119&#x2F;demo3&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">&lt;input name&#x3D;&quot;username&quot;&gt; </span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>​    文件中的路径为/xxx/xxx是两层路径；</p><p>​    文件中的form的method指定响应是post，如果指定的是get则调用的是doGet方法。</p></li></ul></li></ul></li></ol><h3 id="4-HTTP协议"><a href="#4-HTTP协议" class="headerlink" title="4.HTTP协议"></a>4.HTTP协议</h3><ol><li><p>概念：Hyper Text Transfer Protocol 超文本传输协议</p><ul><li><p>传输协议：定义了客户端和服务微崭通信时，发送数据的格式。</p></li><li><p>特点：</p><pre><code>基于TCP/IP的高级协议</code></pre><p>​    默认端口号：80</p><p>​    基于请求/响应模型的：一次请求对应一次响应<br>​    无状态的：每次请求之间相互独立的，不能交互数据</p></li><li><p>历史版本：</p><ul><li>1.0：每次请求响应都会及建立新的连接。</li><li>1.1：复用连接，在给服务端发送数据前，浏览器会等一会，若还有数据发送过来，则会替换掉刚刚的数据发送给服务端。</li></ul></li></ul></li></ol><p>2.请求消息数据格式：</p><ul><li>请求头</li><li>请求行</li><li>请求空行</li><li>请求体</li></ul><p>3.响应消息数据格式：</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>陈志侠</title>
      <link href="/2020/02/02/%E9%99%88%E5%BF%97%E4%BE%A0/"/>
      <url>/2020/02/02/%E9%99%88%E5%BF%97%E4%BE%A0/</url>
      
        <content type="html"><![CDATA[<p>你好啊！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/02/02/hello-world/"/>
      <url>/2020/02/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
